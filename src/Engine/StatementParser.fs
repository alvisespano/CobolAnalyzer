// Implementation file for parser generated by fsyacc
module CobolAnalyzer.Engine.StatementParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 2 "StatementParser.fsy"


#light "on"

open System
open Absyn
open Absyn.Cobol.ProcDiv
open Absyn.Ideal
open ParseTrans

let parse_error_rich = None


# 20 "StatementParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | DOT
  | EOF
  | STOP_RUN
  | EXIT
  | MOVE
  | ADD
  | SUBTRACT
  | MULTIPLY
  | DIVIDE
  | SET
  | TO
  | FROM
  | INTO
  | BY
  | GIVING
  | GOTO
  | DEPENDING_ON
  | PERFORM
  | END_PERFORM
  | THRU
  | WITH
  | TEST
  | BEFORE
  | AFTER
  | UNTIL
  | TIMES
  | VARYING
  | THROUGH
  | COMPUTE
  | EVALUATE
  | WHEN
  | END_EVALUATE
  | IS
  | WHEN_OTHER
  | ZEROS
  | SPACES
  | INPUT
  | OUTPUT
  | NO
  | ADVANCING
  | ERROR
  | PROCEDURE
  | COPY
  | STANDARD
  | OTHER
  | ON
  | END_MOVE
  | IF
  | THEN
  | ELSE
  | END_IF
  | OF
  | TRUE
  | FALSE
  | PLUS
  | MINUS
  | MULT
  | DIV
  | MOD
  | NOT
  | AND
  | OR
  | EQ
  | LT
  | GT
  | LEQ
  | GEQ
  | NEQ
  | LESS
  | GREATER
  | THAN
  | EQUAL
  | COMMA
  | COLON
  | BRA
  | KET
  | RESYNC
  | EOL
  | END_INVARIANT
  | DOT_ACCESS of (string)
  | ResyncKeyword of (token)
  | UNKNOWN of (string)
  | INVARIANT_KEYWORD of (string)
  | KEYWORD of (string)
  | FLOAT of (float)
  | UINT64 of (uint64)
  | SINT64 of (int64)
  | ID of (Absyn.id)
  | STRING of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_DOT
    | TOKEN_EOF
    | TOKEN_STOP_RUN
    | TOKEN_EXIT
    | TOKEN_MOVE
    | TOKEN_ADD
    | TOKEN_SUBTRACT
    | TOKEN_MULTIPLY
    | TOKEN_DIVIDE
    | TOKEN_SET
    | TOKEN_TO
    | TOKEN_FROM
    | TOKEN_INTO
    | TOKEN_BY
    | TOKEN_GIVING
    | TOKEN_GOTO
    | TOKEN_DEPENDING_ON
    | TOKEN_PERFORM
    | TOKEN_END_PERFORM
    | TOKEN_THRU
    | TOKEN_WITH
    | TOKEN_TEST
    | TOKEN_BEFORE
    | TOKEN_AFTER
    | TOKEN_UNTIL
    | TOKEN_TIMES
    | TOKEN_VARYING
    | TOKEN_THROUGH
    | TOKEN_COMPUTE
    | TOKEN_EVALUATE
    | TOKEN_WHEN
    | TOKEN_END_EVALUATE
    | TOKEN_IS
    | TOKEN_WHEN_OTHER
    | TOKEN_ZEROS
    | TOKEN_SPACES
    | TOKEN_INPUT
    | TOKEN_OUTPUT
    | TOKEN_NO
    | TOKEN_ADVANCING
    | TOKEN_ERROR
    | TOKEN_PROCEDURE
    | TOKEN_COPY
    | TOKEN_STANDARD
    | TOKEN_OTHER
    | TOKEN_ON
    | TOKEN_END_MOVE
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_END_IF
    | TOKEN_OF
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MULT
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_NOT
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_EQ
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_NEQ
    | TOKEN_LESS
    | TOKEN_GREATER
    | TOKEN_THAN
    | TOKEN_EQUAL
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_BRA
    | TOKEN_KET
    | TOKEN_RESYNC
    | TOKEN_EOL
    | TOKEN_END_INVARIANT
    | TOKEN_DOT_ACCESS
    | TOKEN_ResyncKeyword
    | TOKEN_UNKNOWN
    | TOKEN_INVARIANT_KEYWORD
    | TOKEN_KEYWORD
    | TOKEN_FLOAT
    | TOKEN_UINT64
    | TOKEN_SINT64
    | TOKEN_ID
    | TOKEN_STRING
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startprocdiv_line
    | NONTERM_procdiv_line
    | NONTERM_newlines
    | NONTERM_sentence
    | NONTERM_statements
    | NONTERM_statement
    | NONTERM_statement'
    | NONTERM_error_statement
    | NONTERM_error_id
    | NONTERM_error_id__
    | NONTERM_anything_mode
    | NONTERM_anything
    | NONTERM_any
    | NONTERM_dotless_statements
    | NONTERM_separator
    | NONTERM_simple_statement
    | NONTERM_block_statement
    | NONTERM_invariant_stmt
    | NONTERM_invariant_kwd
    | NONTERM_anything_mode_inv_lines
    | NONTERM_anything_inv_lines
    | NONTERM_anything_inv
    | NONTERM_arith_stmt
    | NONTERM_arith_stmt_lvalue
    | NONTERM_move_stmt
    | NONTERM_perform_until_stmt
    | NONTERM_perform_call_stmt
    | NONTERM_perform_times_stmt
    | NONTERM_perform_until_varying_after_stmt
    | NONTERM_perform_varying_loop
    | NONTERM_after_varying
    | NONTERM_varying_body
    | NONTERM_perform_target
    | NONTERM_perform_target_newlines
    | NONTERM_evaluate_stmt
    | NONTERM_eval_subject
    | NONTERM_eval_body
    | NONTERM_whens
    | NONTERM_when_body
    | NONTERM_general_expr
    | NONTERM_if_stmt
    | NONTERM_set_stmt
    | NONTERM_goto_stmt
    | NONTERM_targets
    | NONTERM_target
    | NONTERM_lvalue
    | NONTERM_identifiers
    | NONTERM_compute_stmt
    | NONTERM_expr
    | NONTERM_expr__
    | NONTERM_arith_expr
    | NONTERM_string_expr
    | NONTERM_condition
    | NONTERM_condition__
    | NONTERM_cond_expr_right
    | NONTERM_cond_expr_right_item
    | NONTERM_logic_binop
    | NONTERM_arith_binop
    | NONTERM_bool_binop
    | NONTERM_bool_binop_symbol
    | NONTERM_bool_binop_keywords
    | NONTERM_num_rvalue
    | NONTERM_rvalue
    | NONTERM_structured_access
    | NONTERM_lit
    | NONTERM_num_lit
    | NONTERM_array_location
    | NONTERM_range_location

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | DOT  -> 0 
  | EOF  -> 1 
  | STOP_RUN  -> 2 
  | EXIT  -> 3 
  | MOVE  -> 4 
  | ADD  -> 5 
  | SUBTRACT  -> 6 
  | MULTIPLY  -> 7 
  | DIVIDE  -> 8 
  | SET  -> 9 
  | TO  -> 10 
  | FROM  -> 11 
  | INTO  -> 12 
  | BY  -> 13 
  | GIVING  -> 14 
  | GOTO  -> 15 
  | DEPENDING_ON  -> 16 
  | PERFORM  -> 17 
  | END_PERFORM  -> 18 
  | THRU  -> 19 
  | WITH  -> 20 
  | TEST  -> 21 
  | BEFORE  -> 22 
  | AFTER  -> 23 
  | UNTIL  -> 24 
  | TIMES  -> 25 
  | VARYING  -> 26 
  | THROUGH  -> 27 
  | COMPUTE  -> 28 
  | EVALUATE  -> 29 
  | WHEN  -> 30 
  | END_EVALUATE  -> 31 
  | IS  -> 32 
  | WHEN_OTHER  -> 33 
  | ZEROS  -> 34 
  | SPACES  -> 35 
  | INPUT  -> 36 
  | OUTPUT  -> 37 
  | NO  -> 38 
  | ADVANCING  -> 39 
  | ERROR  -> 40 
  | PROCEDURE  -> 41 
  | COPY  -> 42 
  | STANDARD  -> 43 
  | OTHER  -> 44 
  | ON  -> 45 
  | END_MOVE  -> 46 
  | IF  -> 47 
  | THEN  -> 48 
  | ELSE  -> 49 
  | END_IF  -> 50 
  | OF  -> 51 
  | TRUE  -> 52 
  | FALSE  -> 53 
  | PLUS  -> 54 
  | MINUS  -> 55 
  | MULT  -> 56 
  | DIV  -> 57 
  | MOD  -> 58 
  | NOT  -> 59 
  | AND  -> 60 
  | OR  -> 61 
  | EQ  -> 62 
  | LT  -> 63 
  | GT  -> 64 
  | LEQ  -> 65 
  | GEQ  -> 66 
  | NEQ  -> 67 
  | LESS  -> 68 
  | GREATER  -> 69 
  | THAN  -> 70 
  | EQUAL  -> 71 
  | COMMA  -> 72 
  | COLON  -> 73 
  | BRA  -> 74 
  | KET  -> 75 
  | RESYNC  -> 76 
  | EOL  -> 77 
  | END_INVARIANT  -> 78 
  | DOT_ACCESS _ -> 79 
  | ResyncKeyword _ -> 80 
  | UNKNOWN _ -> 81 
  | INVARIANT_KEYWORD _ -> 82 
  | KEYWORD _ -> 83 
  | FLOAT _ -> 84 
  | UINT64 _ -> 85 
  | SINT64 _ -> 86 
  | ID _ -> 87 
  | STRING _ -> 88 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_DOT 
  | 1 -> TOKEN_EOF 
  | 2 -> TOKEN_STOP_RUN 
  | 3 -> TOKEN_EXIT 
  | 4 -> TOKEN_MOVE 
  | 5 -> TOKEN_ADD 
  | 6 -> TOKEN_SUBTRACT 
  | 7 -> TOKEN_MULTIPLY 
  | 8 -> TOKEN_DIVIDE 
  | 9 -> TOKEN_SET 
  | 10 -> TOKEN_TO 
  | 11 -> TOKEN_FROM 
  | 12 -> TOKEN_INTO 
  | 13 -> TOKEN_BY 
  | 14 -> TOKEN_GIVING 
  | 15 -> TOKEN_GOTO 
  | 16 -> TOKEN_DEPENDING_ON 
  | 17 -> TOKEN_PERFORM 
  | 18 -> TOKEN_END_PERFORM 
  | 19 -> TOKEN_THRU 
  | 20 -> TOKEN_WITH 
  | 21 -> TOKEN_TEST 
  | 22 -> TOKEN_BEFORE 
  | 23 -> TOKEN_AFTER 
  | 24 -> TOKEN_UNTIL 
  | 25 -> TOKEN_TIMES 
  | 26 -> TOKEN_VARYING 
  | 27 -> TOKEN_THROUGH 
  | 28 -> TOKEN_COMPUTE 
  | 29 -> TOKEN_EVALUATE 
  | 30 -> TOKEN_WHEN 
  | 31 -> TOKEN_END_EVALUATE 
  | 32 -> TOKEN_IS 
  | 33 -> TOKEN_WHEN_OTHER 
  | 34 -> TOKEN_ZEROS 
  | 35 -> TOKEN_SPACES 
  | 36 -> TOKEN_INPUT 
  | 37 -> TOKEN_OUTPUT 
  | 38 -> TOKEN_NO 
  | 39 -> TOKEN_ADVANCING 
  | 40 -> TOKEN_ERROR 
  | 41 -> TOKEN_PROCEDURE 
  | 42 -> TOKEN_COPY 
  | 43 -> TOKEN_STANDARD 
  | 44 -> TOKEN_OTHER 
  | 45 -> TOKEN_ON 
  | 46 -> TOKEN_END_MOVE 
  | 47 -> TOKEN_IF 
  | 48 -> TOKEN_THEN 
  | 49 -> TOKEN_ELSE 
  | 50 -> TOKEN_END_IF 
  | 51 -> TOKEN_OF 
  | 52 -> TOKEN_TRUE 
  | 53 -> TOKEN_FALSE 
  | 54 -> TOKEN_PLUS 
  | 55 -> TOKEN_MINUS 
  | 56 -> TOKEN_MULT 
  | 57 -> TOKEN_DIV 
  | 58 -> TOKEN_MOD 
  | 59 -> TOKEN_NOT 
  | 60 -> TOKEN_AND 
  | 61 -> TOKEN_OR 
  | 62 -> TOKEN_EQ 
  | 63 -> TOKEN_LT 
  | 64 -> TOKEN_GT 
  | 65 -> TOKEN_LEQ 
  | 66 -> TOKEN_GEQ 
  | 67 -> TOKEN_NEQ 
  | 68 -> TOKEN_LESS 
  | 69 -> TOKEN_GREATER 
  | 70 -> TOKEN_THAN 
  | 71 -> TOKEN_EQUAL 
  | 72 -> TOKEN_COMMA 
  | 73 -> TOKEN_COLON 
  | 74 -> TOKEN_BRA 
  | 75 -> TOKEN_KET 
  | 76 -> TOKEN_RESYNC 
  | 77 -> TOKEN_EOL 
  | 78 -> TOKEN_END_INVARIANT 
  | 79 -> TOKEN_DOT_ACCESS 
  | 80 -> TOKEN_ResyncKeyword 
  | 81 -> TOKEN_UNKNOWN 
  | 82 -> TOKEN_INVARIANT_KEYWORD 
  | 83 -> TOKEN_KEYWORD 
  | 84 -> TOKEN_FLOAT 
  | 85 -> TOKEN_UINT64 
  | 86 -> TOKEN_SINT64 
  | 87 -> TOKEN_ID 
  | 88 -> TOKEN_STRING 
  | 91 -> TOKEN_end_of_input
  | 89 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startprocdiv_line 
    | 1 -> NONTERM_procdiv_line 
    | 2 -> NONTERM_procdiv_line 
    | 3 -> NONTERM_procdiv_line 
    | 4 -> NONTERM_procdiv_line 
    | 5 -> NONTERM_procdiv_line 
    | 6 -> NONTERM_newlines 
    | 7 -> NONTERM_newlines 
    | 8 -> NONTERM_sentence 
    | 9 -> NONTERM_statements 
    | 10 -> NONTERM_statements 
    | 11 -> NONTERM_statement 
    | 12 -> NONTERM_statement' 
    | 13 -> NONTERM_statement' 
    | 14 -> NONTERM_statement' 
    | 15 -> NONTERM_statement' 
    | 16 -> NONTERM_statement' 
    | 17 -> NONTERM_statement' 
    | 18 -> NONTERM_error_statement 
    | 19 -> NONTERM_error_statement 
    | 20 -> NONTERM_error_statement 
    | 21 -> NONTERM_error_statement 
    | 22 -> NONTERM_error_id 
    | 23 -> NONTERM_error_id__ 
    | 24 -> NONTERM_anything_mode 
    | 25 -> NONTERM_anything 
    | 26 -> NONTERM_anything 
    | 27 -> NONTERM_any 
    | 28 -> NONTERM_any 
    | 29 -> NONTERM_any 
    | 30 -> NONTERM_any 
    | 31 -> NONTERM_any 
    | 32 -> NONTERM_any 
    | 33 -> NONTERM_any 
    | 34 -> NONTERM_any 
    | 35 -> NONTERM_any 
    | 36 -> NONTERM_dotless_statements 
    | 37 -> NONTERM_separator 
    | 38 -> NONTERM_separator 
    | 39 -> NONTERM_separator 
    | 40 -> NONTERM_simple_statement 
    | 41 -> NONTERM_simple_statement 
    | 42 -> NONTERM_simple_statement 
    | 43 -> NONTERM_simple_statement 
    | 44 -> NONTERM_simple_statement 
    | 45 -> NONTERM_simple_statement 
    | 46 -> NONTERM_simple_statement 
    | 47 -> NONTERM_simple_statement 
    | 48 -> NONTERM_simple_statement 
    | 49 -> NONTERM_block_statement 
    | 50 -> NONTERM_block_statement 
    | 51 -> NONTERM_block_statement 
    | 52 -> NONTERM_block_statement 
    | 53 -> NONTERM_block_statement 
    | 54 -> NONTERM_block_statement 
    | 55 -> NONTERM_invariant_stmt 
    | 56 -> NONTERM_invariant_stmt 
    | 57 -> NONTERM_invariant_kwd 
    | 58 -> NONTERM_anything_mode_inv_lines 
    | 59 -> NONTERM_anything_inv_lines 
    | 60 -> NONTERM_anything_inv_lines 
    | 61 -> NONTERM_anything_inv_lines 
    | 62 -> NONTERM_anything_inv 
    | 63 -> NONTERM_anything_inv 
    | 64 -> NONTERM_arith_stmt 
    | 65 -> NONTERM_arith_stmt 
    | 66 -> NONTERM_arith_stmt 
    | 67 -> NONTERM_arith_stmt 
    | 68 -> NONTERM_arith_stmt 
    | 69 -> NONTERM_arith_stmt_lvalue 
    | 70 -> NONTERM_arith_stmt_lvalue 
    | 71 -> NONTERM_move_stmt 
    | 72 -> NONTERM_move_stmt 
    | 73 -> NONTERM_perform_until_stmt 
    | 74 -> NONTERM_perform_until_stmt 
    | 75 -> NONTERM_perform_until_stmt 
    | 76 -> NONTERM_perform_until_stmt 
    | 77 -> NONTERM_perform_until_stmt 
    | 78 -> NONTERM_perform_until_stmt 
    | 79 -> NONTERM_perform_call_stmt 
    | 80 -> NONTERM_perform_call_stmt 
    | 81 -> NONTERM_perform_times_stmt 
    | 82 -> NONTERM_perform_times_stmt 
    | 83 -> NONTERM_perform_times_stmt 
    | 84 -> NONTERM_perform_times_stmt 
    | 85 -> NONTERM_perform_until_varying_after_stmt 
    | 86 -> NONTERM_perform_until_varying_after_stmt 
    | 87 -> NONTERM_perform_until_varying_after_stmt 
    | 88 -> NONTERM_perform_until_varying_after_stmt 
    | 89 -> NONTERM_perform_until_varying_after_stmt 
    | 90 -> NONTERM_perform_until_varying_after_stmt 
    | 91 -> NONTERM_perform_varying_loop 
    | 92 -> NONTERM_perform_varying_loop 
    | 93 -> NONTERM_after_varying 
    | 94 -> NONTERM_after_varying 
    | 95 -> NONTERM_varying_body 
    | 96 -> NONTERM_varying_body 
    | 97 -> NONTERM_varying_body 
    | 98 -> NONTERM_varying_body 
    | 99 -> NONTERM_perform_target 
    | 100 -> NONTERM_perform_target 
    | 101 -> NONTERM_perform_target_newlines 
    | 102 -> NONTERM_perform_target_newlines 
    | 103 -> NONTERM_evaluate_stmt 
    | 104 -> NONTERM_evaluate_stmt 
    | 105 -> NONTERM_evaluate_stmt 
    | 106 -> NONTERM_evaluate_stmt 
    | 107 -> NONTERM_eval_subject 
    | 108 -> NONTERM_eval_subject 
    | 109 -> NONTERM_eval_body 
    | 110 -> NONTERM_eval_body 
    | 111 -> NONTERM_eval_body 
    | 112 -> NONTERM_whens 
    | 113 -> NONTERM_whens 
    | 114 -> NONTERM_when_body 
    | 115 -> NONTERM_general_expr 
    | 116 -> NONTERM_general_expr 
    | 117 -> NONTERM_general_expr 
    | 118 -> NONTERM_if_stmt 
    | 119 -> NONTERM_if_stmt 
    | 120 -> NONTERM_if_stmt 
    | 121 -> NONTERM_if_stmt 
    | 122 -> NONTERM_set_stmt 
    | 123 -> NONTERM_goto_stmt 
    | 124 -> NONTERM_goto_stmt 
    | 125 -> NONTERM_targets 
    | 126 -> NONTERM_targets 
    | 127 -> NONTERM_targets 
    | 128 -> NONTERM_target 
    | 129 -> NONTERM_lvalue 
    | 130 -> NONTERM_lvalue 
    | 131 -> NONTERM_identifiers 
    | 132 -> NONTERM_identifiers 
    | 133 -> NONTERM_identifiers 
    | 134 -> NONTERM_compute_stmt 
    | 135 -> NONTERM_expr 
    | 136 -> NONTERM_expr 
    | 137 -> NONTERM_expr__ 
    | 138 -> NONTERM_expr__ 
    | 139 -> NONTERM_arith_expr 
    | 140 -> NONTERM_arith_expr 
    | 141 -> NONTERM_arith_expr 
    | 142 -> NONTERM_arith_expr 
    | 143 -> NONTERM_arith_expr 
    | 144 -> NONTERM_arith_expr 
    | 145 -> NONTERM_arith_expr 
    | 146 -> NONTERM_arith_expr 
    | 147 -> NONTERM_string_expr 
    | 148 -> NONTERM_string_expr 
    | 149 -> NONTERM_condition 
    | 150 -> NONTERM_condition 
    | 151 -> NONTERM_condition__ 
    | 152 -> NONTERM_condition__ 
    | 153 -> NONTERM_condition__ 
    | 154 -> NONTERM_condition__ 
    | 155 -> NONTERM_condition__ 
    | 156 -> NONTERM_condition__ 
    | 157 -> NONTERM_condition__ 
    | 158 -> NONTERM_cond_expr_right 
    | 159 -> NONTERM_cond_expr_right 
    | 160 -> NONTERM_cond_expr_right 
    | 161 -> NONTERM_cond_expr_right_item 
    | 162 -> NONTERM_cond_expr_right_item 
    | 163 -> NONTERM_cond_expr_right_item 
    | 164 -> NONTERM_cond_expr_right_item 
    | 165 -> NONTERM_cond_expr_right_item 
    | 166 -> NONTERM_logic_binop 
    | 167 -> NONTERM_logic_binop 
    | 168 -> NONTERM_arith_binop 
    | 169 -> NONTERM_arith_binop 
    | 170 -> NONTERM_arith_binop 
    | 171 -> NONTERM_arith_binop 
    | 172 -> NONTERM_arith_binop 
    | 173 -> NONTERM_bool_binop 
    | 174 -> NONTERM_bool_binop 
    | 175 -> NONTERM_bool_binop_symbol 
    | 176 -> NONTERM_bool_binop_symbol 
    | 177 -> NONTERM_bool_binop_symbol 
    | 178 -> NONTERM_bool_binop_symbol 
    | 179 -> NONTERM_bool_binop_symbol 
    | 180 -> NONTERM_bool_binop_symbol 
    | 181 -> NONTERM_bool_binop_symbol 
    | 182 -> NONTERM_bool_binop_keywords 
    | 183 -> NONTERM_bool_binop_keywords 
    | 184 -> NONTERM_bool_binop_keywords 
    | 185 -> NONTERM_bool_binop_keywords 
    | 186 -> NONTERM_bool_binop_keywords 
    | 187 -> NONTERM_bool_binop_keywords 
    | 188 -> NONTERM_bool_binop_keywords 
    | 189 -> NONTERM_bool_binop_keywords 
    | 190 -> NONTERM_bool_binop_keywords 
    | 191 -> NONTERM_bool_binop_keywords 
    | 192 -> NONTERM_bool_binop_keywords 
    | 193 -> NONTERM_bool_binop_keywords 
    | 194 -> NONTERM_bool_binop_keywords 
    | 195 -> NONTERM_bool_binop_keywords 
    | 196 -> NONTERM_bool_binop_keywords 
    | 197 -> NONTERM_bool_binop_keywords 
    | 198 -> NONTERM_num_rvalue 
    | 199 -> NONTERM_num_rvalue 
    | 200 -> NONTERM_num_rvalue 
    | 201 -> NONTERM_rvalue 
    | 202 -> NONTERM_rvalue 
    | 203 -> NONTERM_rvalue 
    | 204 -> NONTERM_rvalue 
    | 205 -> NONTERM_rvalue 
    | 206 -> NONTERM_structured_access 
    | 207 -> NONTERM_structured_access 
    | 208 -> NONTERM_structured_access 
    | 209 -> NONTERM_structured_access 
    | 210 -> NONTERM_lit 
    | 211 -> NONTERM_lit 
    | 212 -> NONTERM_lit 
    | 213 -> NONTERM_lit 
    | 214 -> NONTERM_num_lit 
    | 215 -> NONTERM_num_lit 
    | 216 -> NONTERM_num_lit 
    | 217 -> NONTERM_array_location 
    | 218 -> NONTERM_array_location 
    | 219 -> NONTERM_range_location 
    | 220 -> NONTERM_range_location 
    | 221 -> NONTERM_range_location 
    | 222 -> NONTERM_range_location 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 91 
let _fsyacc_tagOfErrorTerminal = 89

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | DOT  -> "DOT" 
  | EOF  -> "EOF" 
  | STOP_RUN  -> "STOP_RUN" 
  | EXIT  -> "EXIT" 
  | MOVE  -> "MOVE" 
  | ADD  -> "ADD" 
  | SUBTRACT  -> "SUBTRACT" 
  | MULTIPLY  -> "MULTIPLY" 
  | DIVIDE  -> "DIVIDE" 
  | SET  -> "SET" 
  | TO  -> "TO" 
  | FROM  -> "FROM" 
  | INTO  -> "INTO" 
  | BY  -> "BY" 
  | GIVING  -> "GIVING" 
  | GOTO  -> "GOTO" 
  | DEPENDING_ON  -> "DEPENDING_ON" 
  | PERFORM  -> "PERFORM" 
  | END_PERFORM  -> "END_PERFORM" 
  | THRU  -> "THRU" 
  | WITH  -> "WITH" 
  | TEST  -> "TEST" 
  | BEFORE  -> "BEFORE" 
  | AFTER  -> "AFTER" 
  | UNTIL  -> "UNTIL" 
  | TIMES  -> "TIMES" 
  | VARYING  -> "VARYING" 
  | THROUGH  -> "THROUGH" 
  | COMPUTE  -> "COMPUTE" 
  | EVALUATE  -> "EVALUATE" 
  | WHEN  -> "WHEN" 
  | END_EVALUATE  -> "END_EVALUATE" 
  | IS  -> "IS" 
  | WHEN_OTHER  -> "WHEN_OTHER" 
  | ZEROS  -> "ZEROS" 
  | SPACES  -> "SPACES" 
  | INPUT  -> "INPUT" 
  | OUTPUT  -> "OUTPUT" 
  | NO  -> "NO" 
  | ADVANCING  -> "ADVANCING" 
  | ERROR  -> "ERROR" 
  | PROCEDURE  -> "PROCEDURE" 
  | COPY  -> "COPY" 
  | STANDARD  -> "STANDARD" 
  | OTHER  -> "OTHER" 
  | ON  -> "ON" 
  | END_MOVE  -> "END_MOVE" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | END_IF  -> "END_IF" 
  | OF  -> "OF" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | MULT  -> "MULT" 
  | DIV  -> "DIV" 
  | MOD  -> "MOD" 
  | NOT  -> "NOT" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | EQ  -> "EQ" 
  | LT  -> "LT" 
  | GT  -> "GT" 
  | LEQ  -> "LEQ" 
  | GEQ  -> "GEQ" 
  | NEQ  -> "NEQ" 
  | LESS  -> "LESS" 
  | GREATER  -> "GREATER" 
  | THAN  -> "THAN" 
  | EQUAL  -> "EQUAL" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | BRA  -> "BRA" 
  | KET  -> "KET" 
  | RESYNC  -> "RESYNC" 
  | EOL  -> "EOL" 
  | END_INVARIANT  -> "END_INVARIANT" 
  | DOT_ACCESS _ -> "DOT_ACCESS" 
  | ResyncKeyword _ -> "ResyncKeyword" 
  | UNKNOWN _ -> "UNKNOWN" 
  | INVARIANT_KEYWORD _ -> "INVARIANT_KEYWORD" 
  | KEYWORD _ -> "KEYWORD" 
  | FLOAT _ -> "FLOAT" 
  | UINT64 _ -> "UINT64" 
  | SINT64 _ -> "SINT64" 
  | ID _ -> "ID" 
  | STRING _ -> "STRING" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | DOT  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | STOP_RUN  -> (null : System.Object) 
  | EXIT  -> (null : System.Object) 
  | MOVE  -> (null : System.Object) 
  | ADD  -> (null : System.Object) 
  | SUBTRACT  -> (null : System.Object) 
  | MULTIPLY  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | SET  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | FROM  -> (null : System.Object) 
  | INTO  -> (null : System.Object) 
  | BY  -> (null : System.Object) 
  | GIVING  -> (null : System.Object) 
  | GOTO  -> (null : System.Object) 
  | DEPENDING_ON  -> (null : System.Object) 
  | PERFORM  -> (null : System.Object) 
  | END_PERFORM  -> (null : System.Object) 
  | THRU  -> (null : System.Object) 
  | WITH  -> (null : System.Object) 
  | TEST  -> (null : System.Object) 
  | BEFORE  -> (null : System.Object) 
  | AFTER  -> (null : System.Object) 
  | UNTIL  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | VARYING  -> (null : System.Object) 
  | THROUGH  -> (null : System.Object) 
  | COMPUTE  -> (null : System.Object) 
  | EVALUATE  -> (null : System.Object) 
  | WHEN  -> (null : System.Object) 
  | END_EVALUATE  -> (null : System.Object) 
  | IS  -> (null : System.Object) 
  | WHEN_OTHER  -> (null : System.Object) 
  | ZEROS  -> (null : System.Object) 
  | SPACES  -> (null : System.Object) 
  | INPUT  -> (null : System.Object) 
  | OUTPUT  -> (null : System.Object) 
  | NO  -> (null : System.Object) 
  | ADVANCING  -> (null : System.Object) 
  | ERROR  -> (null : System.Object) 
  | PROCEDURE  -> (null : System.Object) 
  | COPY  -> (null : System.Object) 
  | STANDARD  -> (null : System.Object) 
  | OTHER  -> (null : System.Object) 
  | ON  -> (null : System.Object) 
  | END_MOVE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | END_IF  -> (null : System.Object) 
  | OF  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | MULT  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | MOD  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LEQ  -> (null : System.Object) 
  | GEQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | LESS  -> (null : System.Object) 
  | GREATER  -> (null : System.Object) 
  | THAN  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | BRA  -> (null : System.Object) 
  | KET  -> (null : System.Object) 
  | RESYNC  -> (null : System.Object) 
  | EOL  -> (null : System.Object) 
  | END_INVARIANT  -> (null : System.Object) 
  | DOT_ACCESS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ResyncKeyword _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UNKNOWN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INVARIANT_KEYWORD _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | KEYWORD _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UINT64 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SINT64 _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 41us; 65535us; 0us; 2us; 12us; 13us; 16us; 19us; 71us; 72us; 109us; 275us; 111us; 275us; 112us; 19us; 118us; 275us; 121us; 275us; 126us; 275us; 127us; 19us; 131us; 275us; 132us; 19us; 141us; 19us; 144us; 186us; 145us; 19us; 149us; 19us; 154us; 19us; 157us; 19us; 171us; 275us; 174us; 275us; 179us; 275us; 182us; 275us; 185us; 187us; 188us; 275us; 198us; 19us; 201us; 19us; 206us; 19us; 212us; 275us; 213us; 19us; 215us; 19us; 217us; 19us; 219us; 19us; 247us; 248us; 269us; 275us; 275us; 275us; 286us; 275us; 290us; 275us; 291us; 275us; 298us; 300us; 299us; 301us; 1us; 65535us; 0us; 11us; 17us; 65535us; 0us; 14us; 16us; 17us; 112us; 46us; 127us; 46us; 132us; 46us; 141us; 46us; 145us; 46us; 149us; 46us; 154us; 46us; 157us; 46us; 198us; 46us; 201us; 46us; 206us; 46us; 213us; 46us; 215us; 46us; 217us; 46us; 219us; 46us; 17us; 65535us; 0us; 16us; 16us; 16us; 112us; 16us; 127us; 16us; 132us; 16us; 141us; 16us; 145us; 16us; 149us; 16us; 154us; 16us; 157us; 16us; 198us; 16us; 201us; 16us; 206us; 16us; 213us; 16us; 215us; 16us; 217us; 16us; 219us; 16us; 17us; 65535us; 0us; 18us; 16us; 18us; 112us; 18us; 127us; 18us; 132us; 18us; 141us; 18us; 145us; 18us; 149us; 18us; 154us; 18us; 157us; 18us; 198us; 18us; 201us; 18us; 206us; 18us; 213us; 18us; 215us; 18us; 217us; 18us; 219us; 18us; 19us; 65535us; 0us; 23us; 2us; 24us; 16us; 23us; 19us; 24us; 112us; 23us; 127us; 23us; 132us; 23us; 141us; 23us; 145us; 23us; 149us; 23us; 154us; 23us; 157us; 23us; 198us; 23us; 201us; 23us; 206us; 23us; 213us; 23us; 215us; 23us; 217us; 23us; 219us; 23us; 19us; 65535us; 0us; 25us; 2us; 25us; 16us; 25us; 19us; 25us; 112us; 25us; 127us; 25us; 132us; 25us; 141us; 25us; 145us; 25us; 149us; 25us; 154us; 25us; 157us; 25us; 198us; 25us; 201us; 25us; 206us; 25us; 213us; 25us; 215us; 25us; 217us; 25us; 219us; 25us; 19us; 65535us; 0us; 32us; 2us; 32us; 16us; 32us; 19us; 32us; 112us; 32us; 127us; 32us; 132us; 32us; 141us; 32us; 145us; 32us; 149us; 32us; 154us; 32us; 157us; 32us; 198us; 32us; 201us; 32us; 206us; 32us; 213us; 32us; 215us; 32us; 217us; 32us; 219us; 32us; 1us; 65535us; 25us; 26us; 2us; 65535us; 25us; 34us; 35us; 36us; 5us; 65535us; 25us; 35us; 35us; 35us; 65us; 74us; 72us; 74us; 74us; 74us; 15us; 65535us; 112us; 113us; 127us; 128us; 132us; 133us; 141us; 142us; 145us; 146us; 149us; 150us; 154us; 155us; 157us; 158us; 198us; 199us; 201us; 202us; 206us; 207us; 213us; 214us; 215us; 216us; 217us; 218us; 219us; 220us; 2us; 65535us; 189us; 192us; 197us; 200us; 17us; 65535us; 0us; 21us; 16us; 21us; 112us; 21us; 127us; 21us; 132us; 21us; 141us; 21us; 145us; 21us; 149us; 21us; 154us; 21us; 157us; 21us; 198us; 21us; 201us; 21us; 206us; 21us; 213us; 21us; 215us; 21us; 217us; 21us; 219us; 21us; 17us; 65535us; 0us; 22us; 16us; 22us; 112us; 22us; 127us; 22us; 132us; 22us; 141us; 22us; 145us; 22us; 149us; 22us; 154us; 22us; 157us; 22us; 198us; 22us; 201us; 22us; 206us; 22us; 213us; 22us; 215us; 22us; 217us; 22us; 219us; 22us; 17us; 65535us; 0us; 56us; 16us; 56us; 112us; 56us; 127us; 56us; 132us; 56us; 141us; 56us; 145us; 56us; 149us; 56us; 154us; 56us; 157us; 56us; 198us; 56us; 201us; 56us; 206us; 56us; 213us; 56us; 215us; 56us; 217us; 56us; 219us; 56us; 17us; 65535us; 0us; 65us; 16us; 65us; 112us; 65us; 127us; 65us; 132us; 65us; 141us; 65us; 145us; 65us; 149us; 65us; 154us; 65us; 157us; 65us; 198us; 65us; 201us; 65us; 206us; 65us; 213us; 65us; 215us; 65us; 217us; 65us; 219us; 65us; 1us; 65535us; 65us; 66us; 2us; 65535us; 65us; 70us; 72us; 73us; 3us; 65535us; 65us; 71us; 72us; 71us; 74us; 75us; 17us; 65535us; 0us; 59us; 16us; 59us; 112us; 59us; 127us; 59us; 132us; 59us; 141us; 59us; 145us; 59us; 149us; 59us; 154us; 59us; 157us; 59us; 198us; 59us; 201us; 59us; 206us; 59us; 213us; 59us; 215us; 59us; 217us; 59us; 219us; 59us; 4us; 65535us; 78us; 79us; 82us; 83us; 86us; 87us; 90us; 91us; 17us; 65535us; 0us; 60us; 16us; 60us; 112us; 60us; 127us; 60us; 132us; 60us; 141us; 60us; 145us; 60us; 149us; 60us; 154us; 60us; 157us; 60us; 198us; 60us; 201us; 60us; 206us; 60us; 213us; 60us; 215us; 60us; 217us; 60us; 219us; 60us; 17us; 65535us; 0us; 62us; 16us; 62us; 112us; 62us; 127us; 62us; 132us; 62us; 141us; 62us; 145us; 62us; 149us; 62us; 154us; 62us; 157us; 62us; 198us; 62us; 201us; 62us; 206us; 62us; 213us; 62us; 215us; 62us; 217us; 62us; 219us; 62us; 17us; 65535us; 0us; 53us; 16us; 53us; 112us; 53us; 127us; 53us; 132us; 53us; 141us; 53us; 145us; 53us; 149us; 53us; 154us; 53us; 157us; 53us; 198us; 53us; 201us; 53us; 206us; 53us; 213us; 53us; 215us; 53us; 217us; 53us; 219us; 53us; 17us; 65535us; 0us; 61us; 16us; 61us; 112us; 61us; 127us; 61us; 132us; 61us; 141us; 61us; 145us; 61us; 149us; 61us; 154us; 61us; 157us; 61us; 198us; 61us; 201us; 61us; 206us; 61us; 213us; 61us; 215us; 61us; 217us; 61us; 219us; 61us; 17us; 65535us; 0us; 63us; 16us; 63us; 112us; 63us; 127us; 63us; 132us; 63us; 141us; 63us; 145us; 63us; 149us; 63us; 154us; 63us; 157us; 63us; 198us; 63us; 201us; 63us; 206us; 63us; 213us; 63us; 215us; 63us; 217us; 63us; 219us; 63us; 6us; 65535us; 107us; 149us; 108us; 148us; 117us; 152us; 120us; 153us; 125us; 154us; 130us; 157us; 2us; 65535us; 161us; 162us; 164us; 165us; 2us; 65535us; 160us; 161us; 163us; 164us; 1us; 65535us; 107us; 135us; 1us; 65535us; 107us; 108us; 17us; 65535us; 0us; 64us; 16us; 64us; 112us; 64us; 127us; 64us; 132us; 64us; 141us; 64us; 145us; 64us; 149us; 64us; 154us; 64us; 157us; 64us; 198us; 64us; 201us; 64us; 206us; 64us; 213us; 64us; 215us; 64us; 217us; 64us; 219us; 64us; 1us; 65535us; 188us; 189us; 2us; 65535us; 189us; 190us; 192us; 193us; 3us; 65535us; 189us; 197us; 192us; 197us; 203us; 204us; 3us; 65535us; 189us; 203us; 192us; 203us; 203us; 203us; 2us; 65535us; 188us; 195us; 205us; 206us; 17us; 65535us; 0us; 50us; 16us; 50us; 112us; 50us; 127us; 50us; 132us; 50us; 141us; 50us; 145us; 50us; 149us; 50us; 154us; 50us; 157us; 50us; 198us; 50us; 201us; 50us; 206us; 50us; 213us; 50us; 215us; 50us; 217us; 50us; 219us; 50us; 17us; 65535us; 0us; 55us; 16us; 55us; 112us; 55us; 127us; 55us; 132us; 55us; 141us; 55us; 145us; 55us; 149us; 55us; 154us; 55us; 157us; 55us; 198us; 55us; 201us; 55us; 206us; 55us; 213us; 55us; 215us; 55us; 217us; 55us; 219us; 55us; 17us; 65535us; 0us; 52us; 16us; 52us; 112us; 52us; 127us; 52us; 132us; 52us; 141us; 52us; 145us; 52us; 149us; 52us; 154us; 52us; 157us; 52us; 198us; 52us; 201us; 52us; 206us; 52us; 213us; 52us; 215us; 52us; 217us; 52us; 219us; 52us; 10us; 65535us; 78us; 96us; 82us; 96us; 86us; 96us; 90us; 96us; 94us; 95us; 98us; 99us; 102us; 103us; 105us; 106us; 230us; 233us; 231us; 232us; 10us; 65535us; 78us; 230us; 82us; 230us; 86us; 230us; 90us; 230us; 94us; 230us; 98us; 230us; 102us; 230us; 105us; 230us; 230us; 230us; 231us; 230us; 10us; 65535us; 78us; 234us; 82us; 234us; 86us; 234us; 90us; 234us; 94us; 234us; 98us; 234us; 102us; 234us; 105us; 234us; 230us; 234us; 231us; 234us; 4us; 65535us; 225us; 227us; 226us; 242us; 239us; 242us; 240us; 241us; 17us; 65535us; 0us; 54us; 16us; 54us; 112us; 54us; 127us; 54us; 132us; 54us; 141us; 54us; 145us; 54us; 149us; 54us; 154us; 54us; 157us; 54us; 198us; 54us; 201us; 54us; 206us; 54us; 213us; 54us; 215us; 54us; 217us; 54us; 219us; 54us; 23us; 65535us; 109us; 277us; 111us; 277us; 118us; 277us; 121us; 277us; 126us; 277us; 131us; 277us; 171us; 277us; 174us; 277us; 179us; 277us; 182us; 277us; 188us; 209us; 205us; 208us; 212us; 277us; 269us; 277us; 275us; 277us; 278us; 297us; 280us; 297us; 282us; 297us; 286us; 277us; 290us; 277us; 291us; 277us; 293us; 297us; 295us; 297us; 23us; 65535us; 109us; 247us; 111us; 247us; 118us; 247us; 121us; 247us; 126us; 247us; 131us; 247us; 171us; 247us; 174us; 247us; 179us; 247us; 182us; 247us; 188us; 247us; 205us; 247us; 212us; 247us; 269us; 247us; 275us; 247us; 278us; 247us; 280us; 247us; 282us; 247us; 286us; 247us; 290us; 247us; 291us; 247us; 293us; 247us; 295us; 247us; 32us; 65535us; 109us; 249us; 111us; 249us; 118us; 249us; 121us; 249us; 126us; 249us; 131us; 249us; 171us; 249us; 174us; 249us; 179us; 249us; 182us; 249us; 188us; 249us; 205us; 249us; 212us; 249us; 245us; 246us; 261us; 254us; 262us; 255us; 263us; 256us; 264us; 257us; 265us; 258us; 266us; 259us; 267us; 260us; 268us; 260us; 269us; 250us; 275us; 249us; 278us; 249us; 280us; 249us; 282us; 249us; 286us; 249us; 290us; 249us; 291us; 249us; 293us; 249us; 295us; 249us; 24us; 65535us; 109us; 251us; 111us; 251us; 118us; 251us; 121us; 251us; 126us; 251us; 131us; 251us; 171us; 251us; 174us; 251us; 179us; 251us; 182us; 251us; 188us; 251us; 205us; 251us; 212us; 251us; 268us; 272us; 269us; 252us; 275us; 251us; 278us; 251us; 280us; 251us; 282us; 251us; 286us; 251us; 290us; 251us; 291us; 251us; 293us; 251us; 295us; 251us; 17us; 65535us; 109us; 110us; 111us; 112us; 118us; 119us; 121us; 122us; 126us; 127us; 131us; 132us; 171us; 172us; 174us; 175us; 179us; 180us; 182us; 183us; 188us; 196us; 212us; 213us; 269us; 284us; 275us; 276us; 286us; 287us; 290us; 288us; 291us; 289us; 17us; 65535us; 109us; 274us; 111us; 274us; 118us; 274us; 121us; 274us; 126us; 274us; 131us; 274us; 171us; 274us; 174us; 274us; 179us; 274us; 182us; 274us; 188us; 274us; 212us; 274us; 269us; 274us; 275us; 274us; 286us; 274us; 290us; 274us; 291us; 274us; 5us; 65535us; 278us; 279us; 280us; 281us; 282us; 283us; 293us; 294us; 295us; 296us; 5us; 65535us; 278us; 292us; 280us; 292us; 282us; 292us; 293us; 292us; 295us; 292us; 5us; 65535us; 25us; 43us; 35us; 43us; 65us; 43us; 72us; 43us; 74us; 43us; 5us; 65535us; 25us; 42us; 35us; 42us; 65us; 42us; 72us; 42us; 74us; 42us; 7us; 65535us; 25us; 41us; 35us; 41us; 65us; 41us; 72us; 41us; 74us; 41us; 209us; 282us; 277us; 282us; 7us; 65535us; 25us; 309us; 35us; 309us; 65us; 309us; 72us; 309us; 74us; 309us; 209us; 309us; 277us; 309us; 7us; 65535us; 25us; 310us; 35us; 310us; 65us; 310us; 72us; 310us; 74us; 310us; 209us; 310us; 277us; 310us; 32us; 65535us; 109us; 253us; 111us; 253us; 118us; 253us; 121us; 253us; 126us; 253us; 131us; 253us; 171us; 253us; 174us; 253us; 179us; 253us; 182us; 253us; 188us; 253us; 205us; 253us; 212us; 253us; 245us; 253us; 261us; 253us; 262us; 253us; 263us; 253us; 264us; 253us; 265us; 253us; 266us; 253us; 267us; 253us; 268us; 253us; 269us; 253us; 275us; 253us; 278us; 253us; 280us; 253us; 282us; 253us; 286us; 253us; 290us; 253us; 291us; 253us; 293us; 253us; 295us; 253us; 11us; 65535us; 76us; 77us; 78us; 97us; 80us; 81us; 82us; 97us; 84us; 85us; 86us; 97us; 88us; 89us; 90us; 97us; 92us; 93us; 100us; 101us; 223us; 224us; 55us; 65535us; 25us; 39us; 35us; 39us; 65us; 39us; 72us; 39us; 74us; 39us; 76us; 351us; 78us; 238us; 80us; 351us; 82us; 238us; 84us; 351us; 86us; 238us; 88us; 351us; 90us; 238us; 92us; 351us; 94us; 237us; 98us; 237us; 100us; 351us; 102us; 237us; 105us; 237us; 109us; 346us; 111us; 346us; 118us; 346us; 121us; 346us; 126us; 346us; 131us; 346us; 171us; 346us; 174us; 346us; 179us; 346us; 182us; 346us; 188us; 346us; 205us; 346us; 212us; 346us; 223us; 351us; 230us; 237us; 231us; 237us; 245us; 346us; 261us; 346us; 262us; 346us; 263us; 346us; 264us; 346us; 265us; 346us; 266us; 346us; 267us; 346us; 268us; 346us; 269us; 346us; 275us; 346us; 278us; 346us; 280us; 346us; 282us; 346us; 286us; 346us; 290us; 346us; 291us; 346us; 293us; 346us; 295us; 346us; 358us; 359us; 16us; 65535us; 25us; 40us; 35us; 40us; 65us; 40us; 72us; 40us; 74us; 40us; 76us; 348us; 78us; 348us; 80us; 348us; 82us; 348us; 84us; 348us; 86us; 348us; 88us; 348us; 90us; 348us; 92us; 348us; 100us; 348us; 223us; 348us; 48us; 65535us; 25us; 361us; 35us; 361us; 65us; 361us; 72us; 361us; 74us; 361us; 76us; 361us; 78us; 361us; 80us; 361us; 82us; 361us; 84us; 361us; 86us; 361us; 88us; 361us; 90us; 361us; 92us; 361us; 100us; 361us; 109us; 345us; 111us; 345us; 118us; 345us; 121us; 345us; 126us; 345us; 131us; 345us; 171us; 345us; 174us; 345us; 179us; 345us; 182us; 345us; 188us; 345us; 205us; 345us; 212us; 345us; 223us; 361us; 245us; 345us; 261us; 345us; 262us; 345us; 263us; 345us; 264us; 345us; 265us; 345us; 266us; 345us; 267us; 345us; 268us; 345us; 269us; 345us; 275us; 345us; 278us; 345us; 280us; 345us; 282us; 345us; 286us; 345us; 290us; 345us; 291us; 345us; 293us; 345us; 295us; 345us; 1us; 65535us; 353us; 354us; 1us; 65535us; 353us; 356us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 45us; 47us; 65us; 83us; 101us; 121us; 141us; 161us; 163us; 166us; 172us; 188us; 191us; 209us; 227us; 245us; 263us; 265us; 268us; 272us; 290us; 295us; 313us; 331us; 349us; 367us; 385us; 392us; 395us; 398us; 400us; 402us; 420us; 422us; 425us; 429us; 433us; 436us; 454us; 472us; 490us; 501us; 512us; 523us; 528us; 546us; 570us; 594us; 627us; 652us; 670us; 688us; 694us; 700us; 706us; 712us; 720us; 728us; 736us; 769us; 781us; 837us; 854us; 903us; 905us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 4us; 1us; 4us; 12us; 17us; 1us; 1us; 1us; 2us; 2us; 3us; 23us; 1us; 3us; 1us; 3us; 2us; 4us; 23us; 1us; 4us; 1us; 4us; 1us; 5us; 2us; 6us; 7us; 1us; 7us; 1us; 8us; 1us; 8us; 2us; 9us; 10us; 1us; 10us; 1us; 11us; 2us; 12us; 17us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 2us; 18us; 19us; 2us; 18us; 19us; 1us; 18us; 1us; 19us; 2us; 20us; 21us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 2us; 25us; 26us; 1us; 26us; 4us; 27us; 206us; 207us; 208us; 1us; 28us; 1us; 29us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 2us; 37us; 39us; 1us; 38us; 1us; 39us; 2us; 40us; 41us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 2us; 55us; 56us; 2us; 55us; 56us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 3us; 59us; 60us; 61us; 2us; 60us; 61us; 1us; 61us; 2us; 62us; 63us; 1us; 63us; 1us; 64us; 1us; 64us; 1us; 64us; 1us; 64us; 1us; 65us; 1us; 65us; 1us; 65us; 1us; 65us; 1us; 66us; 1us; 66us; 1us; 66us; 1us; 66us; 2us; 67us; 68us; 2us; 67us; 68us; 1us; 67us; 1us; 67us; 1us; 68us; 1us; 68us; 1us; 68us; 1us; 68us; 1us; 69us; 1us; 70us; 1us; 70us; 1us; 70us; 2us; 71us; 72us; 2us; 71us; 72us; 1us; 71us; 1us; 71us; 1us; 72us; 1us; 72us; 1us; 72us; 18us; 73us; 74us; 75us; 76us; 77us; 78us; 79us; 80us; 81us; 82us; 83us; 84us; 85us; 86us; 87us; 88us; 89us; 90us; 9us; 73us; 75us; 76us; 80us; 81us; 82us; 85us; 87us; 88us; 1us; 73us; 3us; 73us; 156us; 157us; 1us; 74us; 3us; 74us; 156us; 157us; 1us; 74us; 1us; 74us; 4us; 75us; 76us; 87us; 88us; 4us; 75us; 76us; 87us; 88us; 2us; 75us; 87us; 1us; 75us; 3us; 75us; 156us; 157us; 2us; 76us; 88us; 1us; 76us; 3us; 76us; 156us; 157us; 4us; 77us; 78us; 89us; 90us; 4us; 77us; 78us; 89us; 90us; 2us; 77us; 89us; 1us; 77us; 3us; 77us; 156us; 157us; 1us; 77us; 1us; 77us; 2us; 78us; 90us; 1us; 78us; 3us; 78us; 156us; 157us; 1us; 78us; 1us; 78us; 1us; 79us; 1us; 81us; 1us; 81us; 1us; 82us; 1us; 82us; 1us; 83us; 1us; 83us; 1us; 83us; 1us; 83us; 5us; 84us; 99us; 100us; 101us; 102us; 1us; 84us; 1us; 84us; 1us; 84us; 1us; 85us; 1us; 86us; 1us; 86us; 1us; 86us; 1us; 87us; 1us; 88us; 1us; 89us; 1us; 89us; 1us; 89us; 1us; 90us; 1us; 90us; 1us; 90us; 2us; 91us; 92us; 2us; 91us; 92us; 1us; 92us; 2us; 93us; 94us; 2us; 93us; 94us; 1us; 94us; 4us; 95us; 96us; 97us; 98us; 4us; 95us; 96us; 97us; 98us; 2us; 95us; 96us; 2us; 95us; 96us; 1us; 95us; 1us; 95us; 3us; 95us; 156us; 157us; 1us; 96us; 1us; 96us; 3us; 96us; 156us; 157us; 2us; 97us; 98us; 2us; 97us; 98us; 1us; 97us; 1us; 97us; 3us; 97us; 156us; 157us; 1us; 98us; 1us; 98us; 3us; 98us; 156us; 157us; 2us; 100us; 102us; 2us; 100us; 102us; 1us; 101us; 1us; 102us; 4us; 103us; 104us; 105us; 106us; 4us; 103us; 104us; 105us; 106us; 2us; 103us; 104us; 1us; 104us; 2us; 105us; 106us; 2us; 105us; 106us; 1us; 106us; 1us; 107us; 3us; 108us; 156us; 157us; 3us; 109us; 110us; 111us; 1us; 110us; 1us; 110us; 1us; 111us; 1us; 111us; 1us; 111us; 2us; 112us; 113us; 1us; 113us; 1us; 114us; 1us; 114us; 1us; 114us; 1us; 115us; 4us; 115us; 151us; 152us; 153us; 1us; 116us; 1us; 117us; 4us; 118us; 119us; 120us; 121us; 6us; 118us; 119us; 120us; 121us; 156us; 157us; 2us; 118us; 120us; 2us; 119us; 121us; 2us; 119us; 121us; 1us; 120us; 1us; 120us; 1us; 121us; 1us; 121us; 1us; 122us; 1us; 122us; 1us; 122us; 1us; 122us; 2us; 123us; 124us; 4us; 123us; 131us; 132us; 133us; 1us; 124us; 1us; 124us; 1us; 124us; 3us; 125us; 126us; 127us; 1us; 126us; 1us; 126us; 1us; 127us; 1us; 128us; 5us; 129us; 201us; 206us; 207us; 208us; 4us; 129us; 206us; 207us; 208us; 1us; 130us; 2us; 130us; 205us; 3us; 131us; 132us; 133us; 1us; 132us; 1us; 132us; 1us; 133us; 1us; 134us; 1us; 134us; 1us; 134us; 6us; 134us; 140us; 141us; 142us; 143us; 144us; 2us; 135us; 136us; 1us; 136us; 6us; 137us; 140us; 141us; 142us; 143us; 144us; 7us; 137us; 140us; 141us; 142us; 143us; 144us; 146us; 1us; 138us; 2us; 138us; 148us; 1us; 139us; 6us; 140us; 140us; 141us; 142us; 143us; 144us; 6us; 140us; 141us; 141us; 142us; 143us; 144us; 6us; 140us; 141us; 142us; 142us; 143us; 144us; 6us; 140us; 141us; 142us; 143us; 143us; 144us; 6us; 140us; 141us; 142us; 143us; 144us; 144us; 6us; 140us; 141us; 142us; 143us; 144us; 145us; 6us; 140us; 141us; 142us; 143us; 144us; 146us; 1us; 140us; 1us; 141us; 1us; 142us; 1us; 143us; 1us; 144us; 1us; 145us; 1us; 146us; 2us; 146us; 148us; 3us; 146us; 148us; 154us; 1us; 146us; 1us; 147us; 1us; 148us; 1us; 148us; 1us; 149us; 1us; 150us; 3us; 150us; 156us; 157us; 3us; 151us; 152us; 153us; 1us; 151us; 1us; 151us; 1us; 152us; 1us; 152us; 1us; 153us; 1us; 153us; 3us; 154us; 156us; 157us; 1us; 154us; 1us; 155us; 3us; 155us; 156us; 157us; 3us; 156us; 156us; 157us; 3us; 156us; 157us; 157us; 1us; 156us; 1us; 157us; 3us; 158us; 159us; 160us; 1us; 159us; 1us; 159us; 1us; 160us; 1us; 160us; 1us; 161us; 2us; 162us; 164us; 2us; 163us; 165us; 1us; 164us; 1us; 165us; 1us; 166us; 1us; 167us; 1us; 168us; 1us; 169us; 1us; 170us; 1us; 171us; 1us; 172us; 1us; 173us; 1us; 174us; 1us; 175us; 1us; 176us; 1us; 177us; 1us; 178us; 1us; 179us; 1us; 180us; 1us; 181us; 1us; 181us; 2us; 182us; 183us; 1us; 183us; 8us; 184us; 185us; 187us; 190us; 191us; 193us; 196us; 197us; 2us; 184us; 185us; 1us; 185us; 3us; 186us; 188us; 189us; 3us; 186us; 188us; 189us; 3us; 187us; 190us; 191us; 3us; 187us; 190us; 191us; 2us; 188us; 189us; 2us; 188us; 189us; 1us; 189us; 2us; 190us; 191us; 2us; 190us; 191us; 1us; 191us; 3us; 192us; 194us; 195us; 3us; 192us; 194us; 195us; 3us; 193us; 196us; 197us; 3us; 193us; 196us; 197us; 2us; 194us; 195us; 2us; 194us; 195us; 1us; 195us; 2us; 196us; 197us; 2us; 196us; 197us; 1us; 197us; 4us; 198us; 206us; 207us; 208us; 1us; 199us; 1us; 200us; 4us; 201us; 206us; 207us; 208us; 1us; 202us; 1us; 203us; 1us; 204us; 1us; 205us; 3us; 206us; 207us; 208us; 2us; 206us; 207us; 1us; 206us; 1us; 206us; 1us; 207us; 1us; 207us; 1us; 208us; 1us; 208us; 1us; 209us; 1us; 210us; 1us; 211us; 1us; 212us; 1us; 213us; 1us; 214us; 1us; 215us; 1us; 216us; 3us; 217us; 221us; 222us; 3us; 218us; 219us; 220us; 2us; 219us; 220us; 1us; 219us; 1us; 220us; 2us; 221us; 222us; 1us; 221us; 1us; 222us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 9us; 11us; 13us; 16us; 18us; 20us; 23us; 25us; 27us; 29us; 32us; 34us; 36us; 38us; 41us; 43us; 45us; 48us; 50us; 52us; 54us; 56us; 58us; 61us; 64us; 66us; 68us; 71us; 73us; 75us; 77us; 79us; 81us; 84us; 86us; 91us; 93us; 95us; 97us; 99us; 101us; 103us; 105us; 107us; 109us; 112us; 114us; 116us; 119us; 121us; 123us; 125us; 127us; 129us; 131us; 133us; 135us; 137us; 139us; 141us; 143us; 145us; 147us; 150us; 153us; 155us; 157us; 159us; 161us; 165us; 168us; 170us; 173us; 175us; 177us; 179us; 181us; 183us; 185us; 187us; 189us; 191us; 193us; 195us; 197us; 199us; 202us; 205us; 207us; 209us; 211us; 213us; 215us; 217us; 219us; 221us; 223us; 225us; 228us; 231us; 233us; 235us; 237us; 239us; 241us; 260us; 270us; 272us; 276us; 278us; 282us; 284us; 286us; 291us; 296us; 299us; 301us; 305us; 308us; 310us; 314us; 319us; 324us; 327us; 329us; 333us; 335us; 337us; 340us; 342us; 346us; 348us; 350us; 352us; 354us; 356us; 358us; 360us; 362us; 364us; 366us; 368us; 374us; 376us; 378us; 380us; 382us; 384us; 386us; 388us; 390us; 392us; 394us; 396us; 398us; 400us; 402us; 404us; 407us; 410us; 412us; 415us; 418us; 420us; 425us; 430us; 433us; 436us; 438us; 440us; 444us; 446us; 448us; 452us; 455us; 458us; 460us; 462us; 466us; 468us; 470us; 474us; 477us; 480us; 482us; 484us; 489us; 494us; 497us; 499us; 502us; 505us; 507us; 509us; 513us; 517us; 519us; 521us; 523us; 525us; 527us; 530us; 532us; 534us; 536us; 538us; 540us; 545us; 547us; 549us; 554us; 561us; 564us; 567us; 570us; 572us; 574us; 576us; 578us; 580us; 582us; 584us; 586us; 589us; 594us; 596us; 598us; 600us; 604us; 606us; 608us; 610us; 612us; 618us; 623us; 625us; 628us; 632us; 634us; 636us; 638us; 640us; 642us; 644us; 651us; 654us; 656us; 663us; 671us; 673us; 676us; 678us; 685us; 692us; 699us; 706us; 713us; 720us; 727us; 729us; 731us; 733us; 735us; 737us; 739us; 741us; 744us; 748us; 750us; 752us; 754us; 756us; 758us; 760us; 764us; 768us; 770us; 772us; 774us; 776us; 778us; 780us; 784us; 786us; 788us; 792us; 796us; 800us; 802us; 804us; 808us; 810us; 812us; 814us; 816us; 818us; 821us; 824us; 826us; 828us; 830us; 832us; 834us; 836us; 838us; 840us; 842us; 844us; 846us; 848us; 850us; 852us; 854us; 856us; 858us; 860us; 862us; 865us; 867us; 876us; 879us; 881us; 885us; 889us; 893us; 897us; 900us; 903us; 905us; 908us; 911us; 913us; 917us; 921us; 925us; 929us; 932us; 935us; 937us; 940us; 943us; 945us; 950us; 952us; 954us; 959us; 961us; 963us; 965us; 967us; 971us; 974us; 976us; 978us; 980us; 982us; 984us; 986us; 988us; 990us; 992us; 994us; 996us; 998us; 1000us; 1002us; 1006us; 1010us; 1013us; 1015us; 1017us; 1020us; 1022us; |]
let _fsyacc_action_rows = 376
let _fsyacc_actionTableElements = [|19us; 32768us; 1us; 4us; 2us; 57us; 3us; 58us; 4us; 100us; 5us; 76us; 6us; 80us; 7us; 84us; 8us; 88us; 9us; 221us; 15us; 225us; 17us; 107us; 28us; 243us; 29us; 188us; 47us; 212us; 76us; 20us; 77us; 12us; 82us; 69us; 87us; 5us; 89us; 29us; 0us; 49152us; 3us; 16396us; 1us; 3us; 87us; 8us; 89us; 29us; 0us; 16385us; 0us; 16386us; 1us; 16407us; 76us; 6us; 1us; 32768us; 0us; 7us; 0us; 16387us; 1us; 16407us; 76us; 9us; 1us; 32768us; 0us; 10us; 0us; 16388us; 0us; 16389us; 1us; 16390us; 77us; 12us; 0us; 16391us; 1us; 32768us; 0us; 15us; 0us; 16392us; 18us; 16393us; 2us; 57us; 3us; 58us; 4us; 100us; 5us; 76us; 6us; 80us; 7us; 84us; 8us; 88us; 9us; 221us; 15us; 225us; 17us; 107us; 28us; 243us; 29us; 188us; 47us; 212us; 76us; 20us; 77us; 12us; 82us; 69us; 87us; 33us; 89us; 29us; 0us; 16394us; 0us; 16395us; 2us; 16396us; 87us; 33us; 89us; 29us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 29us; 32768us; 32us; 321us; 52us; 362us; 53us; 363us; 54us; 304us; 55us; 305us; 56us; 306us; 57us; 307us; 58us; 308us; 59us; 317us; 60us; 302us; 61us; 303us; 62us; 311us; 63us; 312us; 64us; 313us; 65us; 314us; 66us; 315us; 67us; 316us; 68us; 324us; 69us; 334us; 71us; 319us; 73us; 45us; 74us; 44us; 79us; 360us; 83us; 38us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 37us; 88us; 364us; 2us; 32768us; 76us; 27us; 77us; 28us; 0us; 16402us; 0us; 16403us; 2us; 32768us; 76us; 30us; 77us; 31us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 29us; 16409us; 32us; 321us; 52us; 362us; 53us; 363us; 54us; 304us; 55us; 305us; 56us; 306us; 57us; 307us; 58us; 308us; 59us; 317us; 60us; 302us; 61us; 303us; 62us; 311us; 63us; 312us; 64us; 313us; 65us; 314us; 66us; 315us; 67us; 316us; 68us; 324us; 69us; 334us; 71us; 319us; 73us; 45us; 74us; 44us; 79us; 360us; 83us; 38us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 37us; 88us; 364us; 0us; 16410us; 2us; 16411us; 51us; 358us; 74us; 353us; 0us; 16412us; 0us; 16413us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 1us; 16421us; 76us; 49us; 0us; 16422us; 0us; 16423us; 1us; 16424us; 50us; 51us; 0us; 16425us; 0us; 16426us; 0us; 16427us; 0us; 16428us; 0us; 16429us; 0us; 16430us; 0us; 16431us; 0us; 16432us; 0us; 16433us; 0us; 16434us; 0us; 16435us; 0us; 16436us; 0us; 16437us; 0us; 16438us; 29us; 32768us; 32us; 321us; 52us; 362us; 53us; 363us; 54us; 304us; 55us; 305us; 56us; 306us; 57us; 307us; 58us; 308us; 59us; 317us; 60us; 302us; 61us; 303us; 62us; 311us; 63us; 312us; 64us; 313us; 65us; 314us; 66us; 315us; 67us; 316us; 68us; 324us; 69us; 334us; 71us; 319us; 73us; 45us; 74us; 44us; 79us; 360us; 83us; 38us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 37us; 88us; 364us; 2us; 32768us; 76us; 67us; 78us; 68us; 0us; 16439us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 1us; 16443us; 77us; 12us; 29us; 16444us; 32us; 321us; 52us; 362us; 53us; 363us; 54us; 304us; 55us; 305us; 56us; 306us; 57us; 307us; 58us; 308us; 59us; 317us; 60us; 302us; 61us; 303us; 62us; 311us; 63us; 312us; 64us; 313us; 65us; 314us; 66us; 315us; 67us; 316us; 68us; 324us; 69us; 334us; 71us; 319us; 73us; 45us; 74us; 44us; 79us; 360us; 83us; 38us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 37us; 88us; 364us; 0us; 16445us; 29us; 16446us; 32us; 321us; 52us; 362us; 53us; 363us; 54us; 304us; 55us; 305us; 56us; 306us; 57us; 307us; 58us; 308us; 59us; 317us; 60us; 302us; 61us; 303us; 62us; 311us; 63us; 312us; 64us; 313us; 65us; 314us; 66us; 315us; 67us; 316us; 68us; 324us; 69us; 334us; 71us; 319us; 73us; 45us; 74us; 44us; 79us; 360us; 83us; 38us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 37us; 88us; 364us; 0us; 16447us; 10us; 32768us; 34us; 349us; 35us; 350us; 52us; 362us; 53us; 363us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 347us; 88us; 364us; 1us; 32768us; 10us; 78us; 10us; 32768us; 34us; 349us; 35us; 350us; 52us; 362us; 53us; 363us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 235us; 88us; 364us; 0us; 16448us; 10us; 32768us; 34us; 349us; 35us; 350us; 52us; 362us; 53us; 363us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 347us; 88us; 364us; 1us; 32768us; 11us; 82us; 10us; 32768us; 34us; 349us; 35us; 350us; 52us; 362us; 53us; 363us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 235us; 88us; 364us; 0us; 16449us; 10us; 32768us; 34us; 349us; 35us; 350us; 52us; 362us; 53us; 363us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 347us; 88us; 364us; 1us; 32768us; 13us; 86us; 10us; 32768us; 34us; 349us; 35us; 350us; 52us; 362us; 53us; 363us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 235us; 88us; 364us; 0us; 16450us; 10us; 32768us; 34us; 349us; 35us; 350us; 52us; 362us; 53us; 363us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 347us; 88us; 364us; 2us; 32768us; 12us; 90us; 13us; 92us; 10us; 32768us; 34us; 349us; 35us; 350us; 52us; 362us; 53us; 363us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 235us; 88us; 364us; 0us; 16451us; 10us; 32768us; 34us; 349us; 35us; 350us; 52us; 362us; 53us; 363us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 347us; 88us; 364us; 1us; 32768us; 14us; 94us; 2us; 32768us; 79us; 360us; 87us; 236us; 0us; 16452us; 0us; 16453us; 1us; 32768us; 14us; 98us; 2us; 32768us; 79us; 360us; 87us; 236us; 0us; 16454us; 10us; 32768us; 34us; 349us; 35us; 350us; 52us; 362us; 53us; 363us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 347us; 88us; 364us; 2us; 32768us; 10us; 102us; 77us; 104us; 2us; 32768us; 79us; 360us; 87us; 236us; 0us; 16455us; 1us; 32768us; 10us; 105us; 2us; 32768us; 79us; 360us; 87us; 236us; 0us; 16456us; 5us; 32768us; 20us; 123us; 24us; 111us; 26us; 160us; 85us; 140us; 87us; 144us; 5us; 16464us; 20us; 115us; 24us; 109us; 26us; 160us; 85us; 136us; 87us; 138us; 10us; 32768us; 55us; 266us; 59us; 286us; 74us; 269us; 77us; 12us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 2us; 16457us; 60us; 290us; 61us; 291us; 10us; 32768us; 55us; 266us; 59us; 286us; 74us; 269us; 77us; 12us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 20us; 32768us; 2us; 57us; 3us; 58us; 4us; 100us; 5us; 76us; 6us; 80us; 7us; 84us; 8us; 88us; 9us; 221us; 15us; 225us; 17us; 107us; 28us; 243us; 29us; 188us; 47us; 212us; 60us; 290us; 61us; 291us; 76us; 20us; 77us; 12us; 82us; 69us; 87us; 33us; 89us; 29us; 1us; 32768us; 18us; 114us; 0us; 16458us; 1us; 32768us; 21us; 116us; 2us; 32768us; 22us; 117us; 23us; 120us; 2us; 32768us; 24us; 118us; 26us; 160us; 10us; 32768us; 55us; 266us; 59us; 286us; 74us; 269us; 77us; 12us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 2us; 16459us; 60us; 290us; 61us; 291us; 2us; 32768us; 24us; 121us; 26us; 160us; 10us; 32768us; 55us; 266us; 59us; 286us; 74us; 269us; 77us; 12us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 2us; 16460us; 60us; 290us; 61us; 291us; 1us; 32768us; 21us; 124us; 2us; 32768us; 22us; 125us; 23us; 130us; 2us; 32768us; 24us; 126us; 26us; 160us; 10us; 32768us; 55us; 266us; 59us; 286us; 74us; 269us; 77us; 12us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 20us; 32768us; 2us; 57us; 3us; 58us; 4us; 100us; 5us; 76us; 6us; 80us; 7us; 84us; 8us; 88us; 9us; 221us; 15us; 225us; 17us; 107us; 28us; 243us; 29us; 188us; 47us; 212us; 60us; 290us; 61us; 291us; 76us; 20us; 77us; 12us; 82us; 69us; 87us; 33us; 89us; 29us; 1us; 32768us; 18us; 129us; 0us; 16461us; 2us; 32768us; 24us; 131us; 26us; 160us; 10us; 32768us; 55us; 266us; 59us; 286us; 74us; 269us; 77us; 12us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 20us; 32768us; 2us; 57us; 3us; 58us; 4us; 100us; 5us; 76us; 6us; 80us; 7us; 84us; 8us; 88us; 9us; 221us; 15us; 225us; 17us; 107us; 28us; 243us; 29us; 188us; 47us; 212us; 60us; 290us; 61us; 291us; 76us; 20us; 77us; 12us; 82us; 69us; 87us; 33us; 89us; 29us; 1us; 32768us; 18us; 134us; 0us; 16462us; 0us; 16463us; 1us; 32768us; 25us; 137us; 0us; 16465us; 1us; 32768us; 25us; 139us; 0us; 16466us; 1us; 32768us; 25us; 141us; 18us; 32768us; 2us; 57us; 3us; 58us; 4us; 100us; 5us; 76us; 6us; 80us; 7us; 84us; 8us; 88us; 9us; 221us; 15us; 225us; 17us; 107us; 28us; 243us; 29us; 188us; 47us; 212us; 76us; 20us; 77us; 12us; 82us; 69us; 87us; 33us; 89us; 29us; 1us; 32768us; 18us; 143us; 0us; 16467us; 3us; 16483us; 19us; 184us; 25us; 145us; 77us; 12us; 18us; 32768us; 2us; 57us; 3us; 58us; 4us; 100us; 5us; 76us; 6us; 80us; 7us; 84us; 8us; 88us; 9us; 221us; 15us; 225us; 17us; 107us; 28us; 243us; 29us; 188us; 47us; 212us; 76us; 20us; 77us; 12us; 82us; 69us; 87us; 33us; 89us; 29us; 1us; 32768us; 18us; 147us; 0us; 16468us; 0us; 16469us; 18us; 32768us; 2us; 57us; 3us; 58us; 4us; 100us; 5us; 76us; 6us; 80us; 7us; 84us; 8us; 88us; 9us; 221us; 15us; 225us; 17us; 107us; 28us; 243us; 29us; 188us; 47us; 212us; 76us; 20us; 77us; 12us; 82us; 69us; 87us; 33us; 89us; 29us; 1us; 32768us; 18us; 151us; 0us; 16470us; 0us; 16471us; 0us; 16472us; 18us; 32768us; 2us; 57us; 3us; 58us; 4us; 100us; 5us; 76us; 6us; 80us; 7us; 84us; 8us; 88us; 9us; 221us; 15us; 225us; 17us; 107us; 28us; 243us; 29us; 188us; 47us; 212us; 76us; 20us; 77us; 12us; 82us; 69us; 87us; 33us; 89us; 29us; 1us; 32768us; 18us; 156us; 0us; 16473us; 18us; 32768us; 2us; 57us; 3us; 58us; 4us; 100us; 5us; 76us; 6us; 80us; 7us; 84us; 8us; 88us; 9us; 221us; 15us; 225us; 17us; 107us; 28us; 243us; 29us; 188us; 47us; 212us; 76us; 20us; 77us; 12us; 82us; 69us; 87us; 33us; 89us; 29us; 1us; 32768us; 18us; 159us; 0us; 16474us; 1us; 32768us; 87us; 166us; 1us; 16475us; 23us; 163us; 0us; 16476us; 1us; 32768us; 87us; 166us; 1us; 16477us; 23us; 163us; 0us; 16478us; 1us; 32768us; 11us; 167us; 2us; 32768us; 85us; 176us; 87us; 168us; 1us; 32768us; 13us; 169us; 2us; 32768us; 85us; 173us; 87us; 170us; 1us; 32768us; 24us; 171us; 10us; 32768us; 55us; 266us; 59us; 286us; 74us; 269us; 77us; 12us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 2us; 16479us; 60us; 290us; 61us; 291us; 1us; 32768us; 24us; 174us; 10us; 32768us; 55us; 266us; 59us; 286us; 74us; 269us; 77us; 12us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 2us; 16480us; 60us; 290us; 61us; 291us; 1us; 32768us; 13us; 177us; 2us; 32768us; 85us; 181us; 87us; 178us; 1us; 32768us; 24us; 179us; 10us; 32768us; 55us; 266us; 59us; 286us; 74us; 269us; 77us; 12us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 2us; 16481us; 60us; 290us; 61us; 291us; 1us; 32768us; 24us; 182us; 10us; 32768us; 55us; 266us; 59us; 286us; 74us; 269us; 77us; 12us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 2us; 16482us; 60us; 290us; 61us; 291us; 1us; 32768us; 87us; 185us; 1us; 16484us; 77us; 12us; 0us; 16485us; 0us; 16486us; 12us; 32768us; 52us; 210us; 53us; 211us; 55us; 266us; 59us; 286us; 74us; 269us; 77us; 12us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 3us; 32768us; 30us; 205us; 76us; 48us; 77us; 47us; 1us; 16487us; 31us; 191us; 0us; 16488us; 1us; 32768us; 30us; 205us; 1us; 16489us; 31us; 194us; 0us; 16490us; 0us; 16491us; 2us; 16492us; 60us; 290us; 61us; 291us; 3us; 16493us; 33us; 198us; 76us; 48us; 77us; 47us; 18us; 32768us; 2us; 57us; 3us; 58us; 4us; 100us; 5us; 76us; 6us; 80us; 7us; 84us; 8us; 88us; 9us; 221us; 15us; 225us; 17us; 107us; 28us; 243us; 29us; 188us; 47us; 212us; 76us; 20us; 77us; 12us; 82us; 69us; 87us; 33us; 89us; 29us; 0us; 16494us; 1us; 32768us; 33us; 201us; 18us; 32768us; 2us; 57us; 3us; 58us; 4us; 100us; 5us; 76us; 6us; 80us; 7us; 84us; 8us; 88us; 9us; 221us; 15us; 225us; 17us; 107us; 28us; 243us; 29us; 188us; 47us; 212us; 76us; 20us; 77us; 12us; 82us; 69us; 87us; 33us; 89us; 29us; 0us; 16495us; 1us; 16496us; 30us; 205us; 0us; 16497us; 10us; 32768us; 52us; 210us; 53us; 211us; 55us; 266us; 74us; 268us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 18us; 32768us; 2us; 57us; 3us; 58us; 4us; 100us; 5us; 76us; 6us; 80us; 7us; 84us; 8us; 88us; 9us; 221us; 15us; 225us; 17us; 107us; 28us; 243us; 29us; 188us; 47us; 212us; 76us; 20us; 77us; 12us; 82us; 69us; 87us; 33us; 89us; 29us; 0us; 16498us; 0us; 16499us; 13us; 16499us; 32us; 321us; 59us; 317us; 60us; 278us; 61us; 280us; 62us; 311us; 63us; 312us; 64us; 313us; 65us; 314us; 66us; 315us; 67us; 316us; 68us; 324us; 69us; 334us; 71us; 319us; 0us; 16500us; 0us; 16501us; 10us; 32768us; 55us; 266us; 59us; 286us; 74us; 269us; 77us; 12us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 21us; 32768us; 2us; 57us; 3us; 58us; 4us; 100us; 5us; 76us; 6us; 80us; 7us; 84us; 8us; 88us; 9us; 221us; 15us; 225us; 17us; 107us; 28us; 243us; 29us; 188us; 47us; 212us; 48us; 215us; 60us; 290us; 61us; 291us; 76us; 20us; 77us; 12us; 82us; 69us; 87us; 33us; 89us; 29us; 1us; 16502us; 49us; 217us; 18us; 32768us; 2us; 57us; 3us; 58us; 4us; 100us; 5us; 76us; 6us; 80us; 7us; 84us; 8us; 88us; 9us; 221us; 15us; 225us; 17us; 107us; 28us; 243us; 29us; 188us; 47us; 212us; 76us; 20us; 77us; 12us; 82us; 69us; 87us; 33us; 89us; 29us; 1us; 16503us; 49us; 219us; 18us; 32768us; 2us; 57us; 3us; 58us; 4us; 100us; 5us; 76us; 6us; 80us; 7us; 84us; 8us; 88us; 9us; 221us; 15us; 225us; 17us; 107us; 28us; 243us; 29us; 188us; 47us; 212us; 76us; 20us; 77us; 12us; 82us; 69us; 87us; 33us; 89us; 29us; 0us; 16504us; 18us; 32768us; 2us; 57us; 3us; 58us; 4us; 100us; 5us; 76us; 6us; 80us; 7us; 84us; 8us; 88us; 9us; 221us; 15us; 225us; 17us; 107us; 28us; 243us; 29us; 188us; 47us; 212us; 76us; 20us; 77us; 12us; 82us; 69us; 87us; 33us; 89us; 29us; 0us; 16505us; 1us; 32768us; 87us; 222us; 1us; 32768us; 10us; 223us; 10us; 32768us; 34us; 349us; 35us; 350us; 52us; 362us; 53us; 363us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 347us; 88us; 364us; 0us; 16506us; 1us; 32768us; 87us; 226us; 3us; 16507us; 16us; 16515us; 72us; 240us; 87us; 239us; 1us; 32768us; 16us; 228us; 1us; 32768us; 87us; 229us; 0us; 16508us; 3us; 16509us; 72us; 231us; 79us; 360us; 87us; 236us; 2us; 32768us; 79us; 360us; 87us; 236us; 0us; 16510us; 0us; 16511us; 0us; 16512us; 3us; 16513us; 14us; 16585us; 51us; 358us; 74us; 353us; 2us; 16513us; 51us; 358us; 74us; 353us; 0us; 16514us; 1us; 16514us; 14us; 16589us; 2us; 16515us; 72us; 240us; 87us; 239us; 1us; 32768us; 87us; 239us; 0us; 16516us; 0us; 16517us; 1us; 32768us; 87us; 244us; 1us; 32768us; 62us; 245us; 7us; 32768us; 55us; 266us; 74us; 267us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 5us; 16518us; 54us; 261us; 55us; 262us; 56us; 263us; 57us; 264us; 58us; 265us; 1us; 16519us; 77us; 12us; 0us; 16520us; 5us; 16521us; 54us; 261us; 55us; 262us; 56us; 263us; 57us; 264us; 58us; 265us; 6us; 16521us; 54us; 261us; 55us; 262us; 56us; 263us; 57us; 264us; 58us; 265us; 75us; 270us; 0us; 16522us; 1us; 16522us; 75us; 273us; 0us; 16523us; 3us; 16524us; 56us; 263us; 57us; 264us; 58us; 265us; 3us; 16525us; 56us; 263us; 57us; 264us; 58us; 265us; 0us; 16526us; 0us; 16527us; 0us; 16528us; 0us; 16529us; 6us; 32768us; 54us; 261us; 55us; 262us; 56us; 263us; 57us; 264us; 58us; 265us; 75us; 270us; 7us; 32768us; 55us; 266us; 74us; 267us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 7us; 32768us; 55us; 266us; 74us; 267us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 7us; 32768us; 55us; 266us; 74us; 267us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 7us; 32768us; 55us; 266us; 74us; 267us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 7us; 32768us; 55us; 266us; 74us; 267us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 7us; 32768us; 55us; 266us; 74us; 267us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 7us; 32768us; 55us; 266us; 74us; 267us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 8us; 32768us; 55us; 266us; 74us; 268us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 10us; 32768us; 55us; 266us; 59us; 286us; 74us; 269us; 77us; 12us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 0us; 16530us; 0us; 16531us; 1us; 32768us; 75us; 273us; 0us; 16532us; 0us; 16533us; 10us; 32768us; 55us; 266us; 59us; 286us; 74us; 269us; 77us; 12us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 2us; 16534us; 60us; 290us; 61us; 291us; 13us; 32768us; 32us; 321us; 59us; 317us; 60us; 278us; 61us; 280us; 62us; 311us; 63us; 312us; 64us; 313us; 65us; 314us; 66us; 315us; 67us; 316us; 68us; 324us; 69us; 334us; 71us; 319us; 10us; 32768us; 34us; 299us; 35us; 298us; 55us; 266us; 74us; 268us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 0us; 16535us; 10us; 32768us; 34us; 299us; 35us; 298us; 55us; 266us; 74us; 268us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 0us; 16536us; 10us; 32768us; 34us; 299us; 35us; 298us; 55us; 266us; 74us; 268us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 0us; 16537us; 3us; 32768us; 60us; 290us; 61us; 291us; 75us; 285us; 0us; 16538us; 10us; 32768us; 55us; 266us; 59us; 286us; 74us; 269us; 77us; 12us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 0us; 16539us; 0us; 16540us; 0us; 16541us; 10us; 32768us; 55us; 266us; 59us; 286us; 74us; 269us; 77us; 12us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 10us; 32768us; 55us; 266us; 59us; 286us; 74us; 269us; 77us; 12us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 2us; 16542us; 60us; 293us; 61us; 295us; 10us; 32768us; 34us; 299us; 35us; 298us; 55us; 266us; 74us; 268us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 0us; 16543us; 10us; 32768us; 34us; 299us; 35us; 298us; 55us; 266us; 74us; 268us; 79us; 360us; 84us; 367us; 85us; 365us; 86us; 366us; 87us; 344us; 88us; 271us; 0us; 16544us; 0us; 16545us; 1us; 16546us; 77us; 12us; 1us; 16547us; 77us; 12us; 0us; 16548us; 0us; 16549us; 0us; 16550us; 0us; 16551us; 0us; 16552us; 0us; 16553us; 0us; 16554us; 0us; 16555us; 0us; 16556us; 0us; 16557us; 0us; 16558us; 0us; 16559us; 0us; 16560us; 0us; 16561us; 0us; 16562us; 0us; 16563us; 0us; 16564us; 1us; 32768us; 62us; 318us; 0us; 16565us; 1us; 16566us; 10us; 320us; 0us; 16567us; 3us; 32768us; 68us; 326us; 69us; 336us; 71us; 322us; 1us; 16568us; 10us; 323us; 0us; 16569us; 1us; 32768us; 70us; 325us; 1us; 16570us; 61us; 328us; 1us; 32768us; 70us; 327us; 1us; 16571us; 61us; 331us; 1us; 32768us; 71us; 329us; 1us; 16572us; 10us; 330us; 0us; 16573us; 1us; 32768us; 71us; 332us; 1us; 16574us; 10us; 333us; 0us; 16575us; 1us; 32768us; 70us; 335us; 1us; 16576us; 61us; 338us; 1us; 32768us; 70us; 337us; 1us; 16577us; 61us; 341us; 1us; 32768us; 71us; 339us; 1us; 16578us; 10us; 340us; 0us; 16579us; 1us; 32768us; 71us; 342us; 1us; 16580us; 10us; 343us; 0us; 16581us; 2us; 16582us; 51us; 358us; 74us; 353us; 0us; 16583us; 0us; 16584us; 2us; 16585us; 51us; 358us; 74us; 353us; 0us; 16586us; 0us; 16587us; 0us; 16588us; 0us; 16589us; 2us; 32768us; 51us; 358us; 74us; 353us; 2us; 32768us; 85us; 369us; 87us; 368us; 1us; 32768us; 75us; 355us; 0us; 16590us; 1us; 32768us; 75us; 357us; 0us; 16591us; 2us; 32768us; 79us; 360us; 87us; 352us; 0us; 16592us; 0us; 16593us; 0us; 16594us; 0us; 16595us; 0us; 16596us; 0us; 16597us; 0us; 16598us; 0us; 16599us; 0us; 16600us; 1us; 16601us; 73us; 373us; 1us; 16602us; 73us; 370us; 2us; 32768us; 85us; 371us; 87us; 372us; 0us; 16603us; 0us; 16604us; 2us; 32768us; 85us; 374us; 87us; 375us; 0us; 16605us; 0us; 16606us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 20us; 21us; 25us; 26us; 27us; 29us; 31us; 32us; 34us; 36us; 37us; 38us; 40us; 41us; 43us; 44us; 63us; 64us; 65us; 68us; 69us; 70us; 71us; 72us; 73us; 103us; 106us; 107us; 108us; 111us; 112us; 113us; 114us; 115us; 116us; 146us; 147us; 150us; 151us; 152us; 153us; 154us; 155us; 156us; 157us; 158us; 159us; 161us; 162us; 163us; 165us; 166us; 167us; 168us; 169us; 170us; 171us; 172us; 173us; 174us; 175us; 176us; 177us; 178us; 179us; 209us; 212us; 213us; 214us; 215us; 216us; 218us; 248us; 249us; 279us; 280us; 291us; 293us; 304us; 305us; 316us; 318us; 329us; 330us; 341us; 343us; 354us; 355us; 366us; 369us; 380us; 381us; 392us; 394us; 397us; 398us; 399us; 401us; 404us; 405us; 416us; 419us; 422us; 423us; 425us; 428us; 429us; 435us; 441us; 452us; 455us; 466us; 487us; 489us; 490us; 492us; 495us; 498us; 509us; 512us; 515us; 526us; 529us; 531us; 534us; 537us; 548us; 569us; 571us; 572us; 575us; 586us; 607us; 609us; 610us; 611us; 613us; 614us; 616us; 617us; 619us; 638us; 640us; 641us; 645us; 664us; 666us; 667us; 668us; 687us; 689us; 690us; 691us; 692us; 711us; 713us; 714us; 733us; 735us; 736us; 738us; 740us; 741us; 743us; 745us; 746us; 748us; 751us; 753us; 756us; 758us; 769us; 772us; 774us; 785us; 788us; 790us; 793us; 795us; 806us; 809us; 811us; 822us; 825us; 827us; 829us; 830us; 831us; 844us; 848us; 850us; 851us; 853us; 855us; 856us; 857us; 860us; 864us; 883us; 884us; 886us; 905us; 906us; 908us; 909us; 920us; 939us; 940us; 941us; 955us; 956us; 957us; 968us; 990us; 992us; 1011us; 1013us; 1032us; 1033us; 1052us; 1053us; 1055us; 1057us; 1068us; 1069us; 1071us; 1075us; 1077us; 1079us; 1080us; 1084us; 1087us; 1088us; 1089us; 1090us; 1094us; 1097us; 1098us; 1100us; 1103us; 1105us; 1106us; 1107us; 1109us; 1111us; 1119us; 1125us; 1127us; 1128us; 1134us; 1141us; 1142us; 1144us; 1145us; 1149us; 1153us; 1154us; 1155us; 1156us; 1157us; 1164us; 1172us; 1180us; 1188us; 1196us; 1204us; 1212us; 1220us; 1229us; 1240us; 1241us; 1242us; 1244us; 1245us; 1246us; 1257us; 1260us; 1274us; 1285us; 1286us; 1297us; 1298us; 1309us; 1310us; 1314us; 1315us; 1326us; 1327us; 1328us; 1329us; 1340us; 1351us; 1354us; 1365us; 1366us; 1377us; 1378us; 1379us; 1381us; 1383us; 1384us; 1385us; 1386us; 1387us; 1388us; 1389us; 1390us; 1391us; 1392us; 1393us; 1394us; 1395us; 1396us; 1397us; 1398us; 1399us; 1400us; 1402us; 1403us; 1405us; 1406us; 1410us; 1412us; 1413us; 1415us; 1417us; 1419us; 1421us; 1423us; 1425us; 1426us; 1428us; 1430us; 1431us; 1433us; 1435us; 1437us; 1439us; 1441us; 1443us; 1444us; 1446us; 1448us; 1449us; 1452us; 1453us; 1454us; 1457us; 1458us; 1459us; 1460us; 1461us; 1464us; 1467us; 1469us; 1470us; 1472us; 1473us; 1476us; 1477us; 1478us; 1479us; 1480us; 1481us; 1482us; 1483us; 1484us; 1485us; 1487us; 1489us; 1492us; 1493us; 1494us; 1497us; 1498us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 3us; 4us; 1us; 1us; 2us; 2us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 3us; 3us; 2us; 2us; 1us; 1us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 3us; 1us; 1us; 1us; 2us; 3us; 1us; 2us; 4us; 4us; 4us; 4us; 6us; 1us; 3us; 4us; 5us; 4us; 5us; 7us; 7us; 8us; 8us; 2us; 2us; 4us; 4us; 5us; 5us; 3us; 4us; 6us; 6us; 7us; 7us; 2us; 3us; 2us; 3us; 7us; 7us; 7us; 7us; 1us; 3us; 2us; 4us; 3us; 4us; 4us; 5us; 1us; 1us; 1us; 3us; 4us; 1us; 2us; 3us; 1us; 1us; 1us; 3us; 4us; 5us; 6us; 4us; 2us; 4us; 1us; 3us; 2us; 1us; 1us; 1us; 1us; 3us; 2us; 4us; 1us; 2us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 2us; 3us; 1us; 3us; 1us; 2us; 3us; 3us; 3us; 3us; 2us; 3us; 3us; 1us; 3us; 3us; 1us; 1us; 1us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 2us; 3us; 2us; 3us; 4us; 5us; 5us; 6us; 2us; 3us; 4us; 5us; 5us; 6us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 4us; 4us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 3us; 4us; 4us; 5us; 6us; 6us; 6us; 6us; 6us; 6us; 7us; 7us; 7us; 7us; 8us; 9us; 10us; 11us; 11us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 12us; 13us; 14us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 16us; 16us; 16us; 16us; 17us; 17us; 18us; 19us; 20us; 20us; 20us; 21us; 21us; 22us; 22us; 22us; 22us; 22us; 23us; 23us; 24us; 24us; 25us; 25us; 25us; 25us; 25us; 25us; 26us; 26us; 27us; 27us; 27us; 27us; 28us; 28us; 28us; 28us; 28us; 28us; 29us; 29us; 30us; 30us; 31us; 31us; 31us; 31us; 32us; 32us; 33us; 33us; 34us; 34us; 34us; 34us; 35us; 35us; 36us; 36us; 36us; 37us; 37us; 38us; 39us; 39us; 39us; 40us; 40us; 40us; 40us; 41us; 42us; 42us; 43us; 43us; 43us; 44us; 45us; 45us; 46us; 46us; 46us; 47us; 48us; 48us; 49us; 49us; 50us; 50us; 50us; 50us; 50us; 50us; 50us; 50us; 51us; 51us; 52us; 52us; 53us; 53us; 53us; 53us; 53us; 53us; 53us; 54us; 54us; 54us; 55us; 55us; 55us; 55us; 55us; 56us; 56us; 57us; 57us; 57us; 57us; 57us; 58us; 58us; 59us; 59us; 59us; 59us; 59us; 59us; 59us; 60us; 60us; 60us; 60us; 60us; 60us; 60us; 60us; 60us; 60us; 60us; 60us; 60us; 60us; 60us; 60us; 61us; 61us; 61us; 62us; 62us; 62us; 62us; 62us; 63us; 63us; 63us; 63us; 64us; 64us; 64us; 64us; 65us; 65us; 65us; 66us; 66us; 67us; 67us; 67us; 67us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 65535us; 16387us; 65535us; 65535us; 16388us; 16389us; 65535us; 16391us; 65535us; 16392us; 65535us; 16394us; 16395us; 65535us; 16397us; 16398us; 16399us; 16400us; 16401us; 65535us; 65535us; 16402us; 16403us; 65535us; 16404us; 16405us; 16406us; 16407us; 16408us; 65535us; 16410us; 65535us; 16412us; 16413us; 16414us; 16415us; 16416us; 16417us; 16418us; 16419us; 16420us; 65535us; 16422us; 16423us; 65535us; 16425us; 16426us; 16427us; 16428us; 16429us; 16430us; 16431us; 16432us; 16433us; 16434us; 16435us; 16436us; 16437us; 16438us; 65535us; 65535us; 16439us; 16440us; 16441us; 16442us; 65535us; 65535us; 16445us; 65535us; 16447us; 65535us; 65535us; 65535us; 16448us; 65535us; 65535us; 65535us; 16449us; 65535us; 65535us; 65535us; 16450us; 65535us; 65535us; 65535us; 16451us; 65535us; 65535us; 65535us; 16452us; 16453us; 65535us; 65535us; 16454us; 65535us; 65535us; 65535us; 16455us; 65535us; 65535us; 16456us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16458us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16461us; 65535us; 65535us; 65535us; 65535us; 16462us; 16463us; 65535us; 16465us; 65535us; 16466us; 65535us; 65535us; 65535us; 16467us; 65535us; 65535us; 65535us; 16468us; 16469us; 65535us; 65535us; 16470us; 16471us; 16472us; 65535us; 65535us; 16473us; 65535us; 65535us; 16474us; 65535us; 65535us; 16476us; 65535us; 65535us; 16478us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16485us; 16486us; 65535us; 65535us; 65535us; 16488us; 65535us; 65535us; 16490us; 16491us; 65535us; 65535us; 65535us; 16494us; 65535us; 65535us; 16495us; 65535us; 16497us; 65535us; 65535us; 16498us; 16499us; 65535us; 16500us; 16501us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16504us; 65535us; 16505us; 65535us; 65535us; 65535us; 16506us; 65535us; 65535us; 65535us; 65535us; 16508us; 65535us; 65535us; 16510us; 16511us; 16512us; 65535us; 65535us; 16514us; 65535us; 65535us; 65535us; 16516us; 16517us; 65535us; 65535us; 65535us; 65535us; 65535us; 16520us; 65535us; 65535us; 16522us; 65535us; 16523us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16530us; 16531us; 65535us; 16532us; 16533us; 65535us; 65535us; 65535us; 65535us; 16535us; 65535us; 16536us; 65535us; 16537us; 65535us; 16538us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16543us; 65535us; 16544us; 16545us; 65535us; 65535us; 16548us; 16549us; 16550us; 16551us; 16552us; 16553us; 16554us; 16555us; 16556us; 16557us; 16558us; 16559us; 16560us; 16561us; 16562us; 16563us; 16564us; 65535us; 16565us; 65535us; 16567us; 65535us; 65535us; 16569us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16573us; 65535us; 65535us; 16575us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16579us; 65535us; 65535us; 16581us; 65535us; 16583us; 16584us; 65535us; 16586us; 16587us; 16588us; 16589us; 65535us; 65535us; 65535us; 16590us; 65535us; 16591us; 65535us; 16592us; 16593us; 16594us; 16595us; 16596us; 16597us; 16598us; 16599us; 16600us; 65535us; 65535us; 65535us; 16603us; 16604us; 65535us; 16605us; 16606us; |]
let _fsyacc_reductions ()  =    [| 
# 892 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.Cobol.ProcDiv.line_mode)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startprocdiv_line));
# 901 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'newlines)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "StatementParser.fsy"
                                          EndOfStream 
                   )
# 67 "StatementParser.fsy"
                 : Absyn.Cobol.ProcDiv.line_mode));
# 912 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "StatementParser.fsy"
                                                               EndOfStream 
                   )
# 68 "StatementParser.fsy"
                 : Absyn.Cobol.ProcDiv.line_mode));
# 922 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "StatementParser.fsy"
                                              ActualLine (Label (locate parseState 1 _1)) 
                   )
# 69 "StatementParser.fsy"
                 : Absyn.Cobol.ProcDiv.line_mode));
# 933 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'newlines)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "StatementParser.fsy"
                                                     ActualLine (Label (locate parseState 2 _2)) 
                   )
# 70 "StatementParser.fsy"
                 : Absyn.Cobol.ProcDiv.line_mode));
# 945 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'sentence)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "StatementParser.fsy"
                                          ActualLine (Statement _1) 
                   )
# 71 "StatementParser.fsy"
                 : Absyn.Cobol.ProcDiv.line_mode));
# 956 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "StatementParser.fsy"
                                    
                   )
# 74 "StatementParser.fsy"
                 : 'newlines));
# 966 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'newlines)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "StatementParser.fsy"
                                             
                   )
# 75 "StatementParser.fsy"
                 : 'newlines));
# 977 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "StatementParser.fsy"
                                             block_of_statements _1 
                   )
# 78 "StatementParser.fsy"
                 : 'sentence));
# 988 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "StatementParser.fsy"
                                        [_1] 
                   )
# 81 "StatementParser.fsy"
                 : 'statements));
# 999 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "StatementParser.fsy"
                                                   _1 :: _2 
                   )
# 82 "StatementParser.fsy"
                 : 'statements));
# 1011 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statement')) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "StatementParser.fsy"
                                         locate parseState 1 _1 
                   )
# 85 "StatementParser.fsy"
                 : 'statement));
# 1022 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'newlines)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "StatementParser.fsy"
                                          Nop 
                   )
# 88 "StatementParser.fsy"
                 : 'statement'));
# 1033 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "StatementParser.fsy"
                                         Nop 
                   )
# 89 "StatementParser.fsy"
                 : 'statement'));
# 1043 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'simple_statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "StatementParser.fsy"
                                                 _1 
                   )
# 90 "StatementParser.fsy"
                 : 'statement'));
# 1054 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'block_statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "StatementParser.fsy"
                                                _1 
                   )
# 91 "StatementParser.fsy"
                 : 'statement'));
# 1065 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'error_statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "StatementParser.fsy"
                                                let r = statement_parser_token_buffer.consume_as_special_statement (fun o -> match o :?> token with ID s -> Some (s, false) | KEYWORD s -> Some (s, true) | _ -> None) Unknown
                                                               in ParseTrans.statement_parser_token_buffer.clear; r 
                   )
# 92 "StatementParser.fsy"
                 : 'statement'));
# 1077 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'newlines)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'error_statement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "StatementParser.fsy"
                                                      let r = statement_parser_token_buffer.consume_as_special_statement (fun o -> match o :?> token with ID s -> Some (s, false) | KEYWORD s -> Some (s, true) | _ -> None) Unknown
                                                               in ParseTrans.statement_parser_token_buffer.clear; r 
                   )
# 94 "StatementParser.fsy"
                 : 'statement'));
# 1090 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'error_id)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'anything_mode)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "StatementParser.fsy"
                                                          
                   )
# 98 "StatementParser.fsy"
                 : 'error_statement));
# 1102 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'error_id)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'anything_mode)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "StatementParser.fsy"
                                                        
                   )
# 99 "StatementParser.fsy"
                 : 'error_statement));
# 1114 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "StatementParser.fsy"
                                             keyword_token_mode <- false 
                   )
# 100 "StatementParser.fsy"
                 : 'error_statement));
# 1124 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "StatementParser.fsy"
                                           keyword_token_mode <- false 
                   )
# 101 "StatementParser.fsy"
                 : 'error_statement));
# 1134 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'error_id__)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "StatementParser.fsy"
                                         _1 
                   )
# 105 "StatementParser.fsy"
                 : 'error_id));
# 1145 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "StatementParser.fsy"
                                   keyword_token_mode <- true; _1 
                   )
# 108 "StatementParser.fsy"
                 : 'error_id__));
# 1156 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'anything)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "StatementParser.fsy"
                                       keyword_token_mode <- false; _1 
                   )
# 111 "StatementParser.fsy"
                 : 'anything_mode));
# 1167 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'any)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "StatementParser.fsy"
                                    _1 
                   )
# 114 "StatementParser.fsy"
                 : 'anything));
# 1178 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'any)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'anything)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "StatementParser.fsy"
                                             _1 @ _2 
                   )
# 115 "StatementParser.fsy"
                 : 'anything));
# 1190 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "StatementParser.fsy"
                                   [_1] 
                   )
# 118 "StatementParser.fsy"
                 : 'any));
# 1201 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "StatementParser.fsy"
                                          [_1] 
                   )
# 119 "StatementParser.fsy"
                 : 'any));
# 1212 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'structured_access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "StatementParser.fsy"
                                                 [] 
                   )
# 120 "StatementParser.fsy"
                 : 'any));
# 1223 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lit)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "StatementParser.fsy"
                                       [] 
                   )
# 121 "StatementParser.fsy"
                 : 'any));
# 1234 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_binop)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "StatementParser.fsy"
                                            [] 
                   )
# 122 "StatementParser.fsy"
                 : 'any));
# 1245 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arith_binop)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "StatementParser.fsy"
                                             [] 
                   )
# 123 "StatementParser.fsy"
                 : 'any));
# 1256 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'logic_binop)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "StatementParser.fsy"
                                             [] 
                   )
# 124 "StatementParser.fsy"
                 : 'any));
# 1267 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "StatementParser.fsy"
                                       [] 
                   )
# 125 "StatementParser.fsy"
                 : 'any));
# 1277 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "StatementParser.fsy"
                                        [] 
                   )
# 126 "StatementParser.fsy"
                 : 'any));
# 1287 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "StatementParser.fsy"
                                         _1 
                   )
# 129 "StatementParser.fsy"
                 : 'dotless_statements));
# 1298 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "StatementParser.fsy"
                                     
                   )
# 132 "StatementParser.fsy"
                 : 'separator));
# 1308 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "StatementParser.fsy"
                                          
                   )
# 133 "StatementParser.fsy"
                 : 'separator));
# 1318 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "StatementParser.fsy"
                                             
                   )
# 134 "StatementParser.fsy"
                 : 'separator));
# 1328 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'if_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "StatementParser.fsy"
                                       _1 
                   )
# 137 "StatementParser.fsy"
                 : 'simple_statement));
# 1339 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'if_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "StatementParser.fsy"
                                                 _1 
                   )
# 138 "StatementParser.fsy"
                 : 'simple_statement));
# 1350 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'goto_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "StatementParser.fsy"
                                           _1 
                   )
# 139 "StatementParser.fsy"
                 : 'simple_statement));
# 1361 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'perform_call_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "StatementParser.fsy"
                                                 _1 
                   )
# 140 "StatementParser.fsy"
                 : 'simple_statement));
# 1372 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'compute_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "StatementParser.fsy"
                                             _1 
                   )
# 141 "StatementParser.fsy"
                 : 'simple_statement));
# 1383 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'set_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "StatementParser.fsy"
                                          _1 
                   )
# 142 "StatementParser.fsy"
                 : 'simple_statement));
# 1394 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'invariant_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "StatementParser.fsy"
                                               let r = statement_parser_token_buffer.consume_as_special_statement (fun o -> match o :?> token with ID s -> Some (s, false) | KEYWORD s -> Some (s, true) | _ -> None) (fun (s, _, _) -> Invariant (s, _1))
                                                               in ParseTrans.statement_parser_token_buffer.clear; r 
                   )
# 143 "StatementParser.fsy"
                 : 'simple_statement));
# 1406 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "StatementParser.fsy"
                                          Return 
                   )
# 145 "StatementParser.fsy"
                 : 'simple_statement));
# 1416 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "StatementParser.fsy"
                                       Return 
                   )
# 146 "StatementParser.fsy"
                 : 'simple_statement));
# 1426 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arith_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "StatementParser.fsy"
                                            _1 
                   )
# 149 "StatementParser.fsy"
                 : 'block_statement));
# 1437 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'move_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "StatementParser.fsy"
                                           _1 
                   )
# 150 "StatementParser.fsy"
                 : 'block_statement));
# 1448 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'perform_times_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "StatementParser.fsy"
                                                  _1 
                   )
# 151 "StatementParser.fsy"
                 : 'block_statement));
# 1459 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'perform_until_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "StatementParser.fsy"
                                                  _1 
                   )
# 152 "StatementParser.fsy"
                 : 'block_statement));
# 1470 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'perform_until_varying_after_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "StatementParser.fsy"
                                                            _1 
                   )
# 153 "StatementParser.fsy"
                 : 'block_statement));
# 1481 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'evaluate_stmt)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "StatementParser.fsy"
                                              _1 
                   )
# 154 "StatementParser.fsy"
                 : 'block_statement));
# 1492 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'invariant_kwd)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'anything_mode_inv_lines)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "StatementParser.fsy"
                                                                         clear_buffer_at_eol <- true; _1 
                   )
# 159 "StatementParser.fsy"
                 : 'invariant_stmt));
# 1504 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'invariant_kwd)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'anything_mode_inv_lines)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "StatementParser.fsy"
                                                                              clear_buffer_at_eol <- true; _1 
                   )
# 160 "StatementParser.fsy"
                 : 'invariant_stmt));
# 1516 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "StatementParser.fsy"
                                              keyword_token_mode <- true; clear_buffer_at_eol <- false; _1 
                   )
# 163 "StatementParser.fsy"
                 : 'invariant_kwd));
# 1527 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'anything_inv_lines)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "StatementParser.fsy"
                                               keyword_token_mode <- false; _1 
                   )
# 166 "StatementParser.fsy"
                 : 'anything_mode_inv_lines));
# 1538 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'anything_inv)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "StatementParser.fsy"
                                            _1 
                   )
# 169 "StatementParser.fsy"
                 : 'anything_inv_lines));
# 1549 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'anything_inv)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'newlines)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "StatementParser.fsy"
                                                      _1 
                   )
# 170 "StatementParser.fsy"
                 : 'anything_inv_lines));
# 1561 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'anything_inv)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'newlines)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'anything_inv_lines)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "StatementParser.fsy"
                                                                    _1 @ _3 
                   )
# 171 "StatementParser.fsy"
                 : 'anything_inv_lines));
# 1574 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'any)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "StatementParser.fsy"
                                    _1 
                   )
# 174 "StatementParser.fsy"
                 : 'anything_inv));
# 1585 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'any)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'anything_inv)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "StatementParser.fsy"
                                                _1 @ _2 
                   )
# 175 "StatementParser.fsy"
                 : 'anything_inv));
# 1597 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'rvalue)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'arith_stmt_lvalue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "StatementParser.fsy"
                                                                  arith_stmt_trans parseState _2 (ArithBinOp Plus)  _4 
                   )
# 184 "StatementParser.fsy"
                 : 'arith_stmt));
# 1609 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'rvalue)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'arith_stmt_lvalue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "StatementParser.fsy"
                                                                          arith_stmt_trans parseState _2 (ArithBinOp Minus) _4 
                   )
# 185 "StatementParser.fsy"
                 : 'arith_stmt));
# 1621 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'rvalue)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'arith_stmt_lvalue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "StatementParser.fsy"
                                                                        arith_stmt_trans parseState _2 (ArithBinOp Mult)  _4 
                   )
# 186 "StatementParser.fsy"
                 : 'arith_stmt));
# 1633 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'rvalue)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'arith_stmt_lvalue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "StatementParser.fsy"
                                                                        arith_stmt_trans parseState _2 (ArithBinOp Div)   _4 
                   )
# 187 "StatementParser.fsy"
                 : 'arith_stmt));
# 1645 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'rvalue)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'rvalue)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'targets)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "StatementParser.fsy"
                                                                           List.map (fun lv -> (_2, lv)) _6 |> arith_stmt_trans parseState _4 (ArithBinOp Div) 
                   )
# 188 "StatementParser.fsy"
                 : 'arith_stmt));
# 1658 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'targets)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "StatementParser.fsy"
                                                List.map (fun lv -> (LValue lv, lv)) _1 
                   )
# 191 "StatementParser.fsy"
                 : 'arith_stmt_lvalue));
# 1669 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rvalue)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'targets)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "StatementParser.fsy"
                                                             List.map (fun lv -> (_1, lv)) _3 
                   )
# 192 "StatementParser.fsy"
                 : 'arith_stmt_lvalue));
# 1681 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'rvalue)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'targets)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "StatementParser.fsy"
                                                           move_stmt_trans parseState _2 _4 
                   )
# 195 "StatementParser.fsy"
                 : 'move_stmt));
# 1693 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'rvalue)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'targets)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "StatementParser.fsy"
                                                                 move_stmt_trans parseState _2 _5 
                   )
# 196 "StatementParser.fsy"
                 : 'move_stmt));
# 1705 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'perform_target_newlines)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 "StatementParser.fsy"
                                                                                perform_until_to_loop parseState (Some _2, None) _4 false 
                   )
# 199 "StatementParser.fsy"
                 : 'perform_until_stmt));
# 1717 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'dotless_statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "StatementParser.fsy"
                                                                                      perform_until_to_loop parseState (None, Some _4) _3 false 
                   )
# 200 "StatementParser.fsy"
                 : 'perform_until_stmt));
# 1729 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'perform_target_newlines)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "StatementParser.fsy"
                                                                                             perform_until_to_loop parseState (Some _2, None) _7 false 
                   )
# 201 "StatementParser.fsy"
                 : 'perform_until_stmt));
# 1741 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'perform_target_newlines)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 202 "StatementParser.fsy"
                                                                                             perform_until_to_loop parseState (Some _2, None) _7 true  
                   )
# 202 "StatementParser.fsy"
                 : 'perform_until_stmt));
# 1753 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'dotless_statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "StatementParser.fsy"
                                                                                                   perform_until_to_loop parseState (None, Some _7) _6 false 
                   )
# 203 "StatementParser.fsy"
                 : 'perform_until_stmt));
# 1765 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'dotless_statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "StatementParser.fsy"
                                                                                                   perform_until_to_loop parseState (None, Some _7) _6 true  
                   )
# 204 "StatementParser.fsy"
                 : 'perform_until_stmt));
# 1777 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'perform_target)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "StatementParser.fsy"
                                                           Perform _2 
                   )
# 207 "StatementParser.fsy"
                 : 'perform_call_stmt));
# 1788 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'perform_target_newlines)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "StatementParser.fsy"
                                                                     Perform _2 
                   )
# 208 "StatementParser.fsy"
                 : 'perform_call_stmt));
# 1799 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'perform_target_newlines)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : uint64)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "StatementParser.fsy"
                                                                           perform_times_to_loop parseState (Some _2, None) (Lit (Int (Convert.ToInt64 _3))) 
                   )
# 211 "StatementParser.fsy"
                 : 'perform_times_stmt));
# 1811 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'perform_target_newlines)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 212 "StatementParser.fsy"
                                                                             perform_times_to_loop parseState (Some _2, None) (LValue (Id _3)) 
                   )
# 212 "StatementParser.fsy"
                 : 'perform_times_stmt));
# 1823 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : uint64)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'dotless_statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "StatementParser.fsy"
                                                                                    perform_times_to_loop parseState (None, Some _4) (Lit (Int (Convert.ToInt64 _2))) 
                   )
# 213 "StatementParser.fsy"
                 : 'perform_times_stmt));
# 1835 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'dotless_statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 214 "StatementParser.fsy"
                                                                                  perform_times_to_loop parseState (None, Some _4) (LValue (Id _2)) 
                   )
# 214 "StatementParser.fsy"
                 : 'perform_times_stmt));
# 1847 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'perform_target_newlines)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'perform_varying_loop)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 217 "StatementParser.fsy"
                                                                                   perform_until_varying_after_to_loop parseState (Some _2, None) _3 false 
                   )
# 217 "StatementParser.fsy"
                 : 'perform_until_varying_after_stmt));
# 1859 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'perform_varying_loop)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'dotless_statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 218 "StatementParser.fsy"
                                                                                            perform_until_varying_after_to_loop parseState (None, Some _3) _2 false 
                   )
# 218 "StatementParser.fsy"
                 : 'perform_until_varying_after_stmt));
# 1871 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'perform_target_newlines)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'perform_varying_loop)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 219 "StatementParser.fsy"
                                                                                                   perform_until_varying_after_to_loop parseState (Some _2, None) _6 false 
                   )
# 219 "StatementParser.fsy"
                 : 'perform_until_varying_after_stmt));
# 1883 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'perform_target_newlines)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'perform_varying_loop)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 220 "StatementParser.fsy"
                                                                                                   perform_until_varying_after_to_loop parseState (Some _2, None) _6 true  
                   )
# 220 "StatementParser.fsy"
                 : 'perform_until_varying_after_stmt));
# 1895 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'perform_varying_loop)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'dotless_statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 221 "StatementParser.fsy"
                                                                                                        perform_until_varying_after_to_loop parseState (None, Some _6) _5 false 
                   )
# 221 "StatementParser.fsy"
                 : 'perform_until_varying_after_stmt));
# 1907 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'perform_varying_loop)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'dotless_statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 222 "StatementParser.fsy"
                                                                                                        perform_until_varying_after_to_loop parseState (None, Some _6) _5 true  
                   )
# 222 "StatementParser.fsy"
                 : 'perform_until_varying_after_stmt));
# 1919 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'varying_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 225 "StatementParser.fsy"
                                                    [_2] 
                   )
# 225 "StatementParser.fsy"
                 : 'perform_varying_loop));
# 1930 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'varying_body)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'after_varying)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 226 "StatementParser.fsy"
                                                                  _2 :: _3 
                   )
# 226 "StatementParser.fsy"
                 : 'perform_varying_loop));
# 1942 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'varying_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 229 "StatementParser.fsy"
                                                   [_2] 
                   )
# 229 "StatementParser.fsy"
                 : 'after_varying));
# 1953 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'varying_body)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'after_varying)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 230 "StatementParser.fsy"
                                                                _2 :: _3 
                   )
# 230 "StatementParser.fsy"
                 : 'after_varying));
# 1965 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 233 "StatementParser.fsy"
                                                              (_1, LValue (Id _3), LValue (Id _5), _7) 
                   )
# 233 "StatementParser.fsy"
                 : 'varying_body));
# 1979 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : uint64)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 234 "StatementParser.fsy"
                                                                    (_1, LValue (Id _3), Lit (Int (Convert.ToInt64 _5)), _7) 
                   )
# 234 "StatementParser.fsy"
                 : 'varying_body));
# 1993 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : uint64)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 235 "StatementParser.fsy"
                                                                    (_1, Lit (Int (Convert.ToInt64 _3)), LValue (Id _5), _7) 
                   )
# 235 "StatementParser.fsy"
                 : 'varying_body));
# 2007 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : uint64)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : uint64)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 236 "StatementParser.fsy"
                                                                       (_1, Lit (Int (Convert.ToInt64 _3)), Lit (Int (Convert.ToInt64 _5)), _7) 
                   )
# 236 "StatementParser.fsy"
                 : 'varying_body));
# 2021 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 239 "StatementParser.fsy"
                                       (_1, None) 
                   )
# 239 "StatementParser.fsy"
                 : 'perform_target));
# 2032 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 240 "StatementParser.fsy"
                                                (_1, Some _3) 
                   )
# 240 "StatementParser.fsy"
                 : 'perform_target));
# 2044 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'newlines)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 243 "StatementParser.fsy"
                                                 (_1, None) 
                   )
# 243 "StatementParser.fsy"
                 : 'perform_target_newlines));
# 2056 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'newlines)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 244 "StatementParser.fsy"
                                                       (_1, Some _3) 
                   )
# 244 "StatementParser.fsy"
                 : 'perform_target_newlines));
# 2069 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'eval_subject)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'eval_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 247 "StatementParser.fsy"
                                                              evaluate_to_if parseState _2 _3 
                   )
# 247 "StatementParser.fsy"
                 : 'evaluate_stmt));
# 2081 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'eval_subject)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'eval_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 248 "StatementParser.fsy"
                                                                          evaluate_to_if parseState _2 _3 
                   )
# 248 "StatementParser.fsy"
                 : 'evaluate_stmt));
# 2093 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'eval_subject)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'separator)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'eval_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 249 "StatementParser.fsy"
                                                                        evaluate_to_if parseState _2 _4 
                   )
# 249 "StatementParser.fsy"
                 : 'evaluate_stmt));
# 2106 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'eval_subject)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'separator)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'eval_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 250 "StatementParser.fsy"
                                                                                  evaluate_to_if parseState _2 _4 
                   )
# 250 "StatementParser.fsy"
                 : 'evaluate_stmt));
# 2119 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'general_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 253 "StatementParser.fsy"
                                              _1 
                   )
# 253 "StatementParser.fsy"
                 : 'eval_subject));
# 2130 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 254 "StatementParser.fsy"
                                               _1 
                   )
# 254 "StatementParser.fsy"
                 : 'eval_subject));
# 2141 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'whens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 257 "StatementParser.fsy"
                                                                          (_1, []) 
                   )
# 257 "StatementParser.fsy"
                 : 'eval_body));
# 2152 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'whens)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'dotless_statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 258 "StatementParser.fsy"
                                                                   (_1, _3) 
                   )
# 258 "StatementParser.fsy"
                 : 'eval_body));
# 2164 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'whens)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'separator)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'dotless_statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 259 "StatementParser.fsy"
                                                                          (_1, _4) 
                   )
# 259 "StatementParser.fsy"
                 : 'eval_body));
# 2177 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'when_body)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 262 "StatementParser.fsy"
                                               [_1] 
                   )
# 262 "StatementParser.fsy"
                 : 'whens));
# 2188 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'when_body)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'whens)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 263 "StatementParser.fsy"
                                                    _1 :: _2 
                   )
# 263 "StatementParser.fsy"
                 : 'whens));
# 2200 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'general_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'dotless_statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 266 "StatementParser.fsy"
                                                                   (_2, _3) 
                   )
# 266 "StatementParser.fsy"
                 : 'when_body));
# 2212 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 269 "StatementParser.fsy"
                                        _1 
                   )
# 269 "StatementParser.fsy"
                 : 'general_expr));
# 2223 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 270 "StatementParser.fsy"
                                           Lit True 
                   )
# 270 "StatementParser.fsy"
                 : 'general_expr));
# 2233 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 271 "StatementParser.fsy"
                                            Lit False 
                   )
# 271 "StatementParser.fsy"
                 : 'general_expr));
# 2243 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'dotless_statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 277 "StatementParser.fsy"
                                                                If (_2, block_of_statements _3, None) 
                   )
# 277 "StatementParser.fsy"
                 : 'if_stmt));
# 2255 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'dotless_statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 278 "StatementParser.fsy"
                                                                      If (_2, block_of_statements _4, None) 
                   )
# 278 "StatementParser.fsy"
                 : 'if_stmt));
# 2267 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'dotless_statements)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'dotless_statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 279 "StatementParser.fsy"
                                                                                     If (_2, block_of_statements _3, Some (block_of_statements _5)) 
                   )
# 279 "StatementParser.fsy"
                 : 'if_stmt));
# 2280 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'dotless_statements)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'dotless_statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 280 "StatementParser.fsy"
                                                                                        If (_2, block_of_statements _4, Some (block_of_statements _6)) 
                   )
# 280 "StatementParser.fsy"
                 : 'if_stmt));
# 2293 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'rvalue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 283 "StatementParser.fsy"
                                                 Assign (Id _2, _4) 
                   )
# 283 "StatementParser.fsy"
                 : 'set_stmt));
# 2305 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 286 "StatementParser.fsy"
                                           Goto _2 
                   )
# 286 "StatementParser.fsy"
                 : 'goto_stmt));
# 2316 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'identifiers)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 287 "StatementParser.fsy"
                                                                goto_depending_to_if parseState (_2, 1L) _4 
                   )
# 287 "StatementParser.fsy"
                 : 'goto_stmt));
# 2328 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'target)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 290 "StatementParser.fsy"
                                          [_1] 
                   )
# 290 "StatementParser.fsy"
                 : 'targets));
# 2339 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'target)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'targets)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 291 "StatementParser.fsy"
                                                       _1 :: _3 
                   )
# 291 "StatementParser.fsy"
                 : 'targets));
# 2351 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'target)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'targets)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 292 "StatementParser.fsy"
                                                   _1 :: _2 
                   )
# 292 "StatementParser.fsy"
                 : 'targets));
# 2363 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lvalue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 295 "StatementParser.fsy"
                                          _1 
                   )
# 295 "StatementParser.fsy"
                 : 'target));
# 2374 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 298 "StatementParser.fsy"
                                       Id _1 
                   )
# 298 "StatementParser.fsy"
                 : 'lvalue));
# 2385 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'structured_access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 299 "StatementParser.fsy"
                                                     _1 
                   )
# 299 "StatementParser.fsy"
                 : 'lvalue));
# 2396 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 302 "StatementParser.fsy"
                                       [_1] 
                   )
# 302 "StatementParser.fsy"
                 : 'identifiers));
# 2407 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'identifiers)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 303 "StatementParser.fsy"
                                                       _1 :: _3 
                   )
# 303 "StatementParser.fsy"
                 : 'identifiers));
# 2419 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'identifiers)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 304 "StatementParser.fsy"
                                                   _1 :: _2 
                   )
# 304 "StatementParser.fsy"
                 : 'identifiers));
# 2431 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'arith_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 307 "StatementParser.fsy"
                                                       Assign (Id _2, _4) 
                   )
# 307 "StatementParser.fsy"
                 : 'compute_stmt));
# 2443 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr__)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 310 "StatementParser.fsy"
                                          _1 
                   )
# 310 "StatementParser.fsy"
                 : 'expr));
# 2454 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr__)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'newlines)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 311 "StatementParser.fsy"
                                                    _1 
                   )
# 311 "StatementParser.fsy"
                 : 'expr));
# 2466 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arith_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 314 "StatementParser.fsy"
                                             _1 
                   )
# 314 "StatementParser.fsy"
                 : 'expr__));
# 2477 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'string_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 315 "StatementParser.fsy"
                                                 _1 
                   )
# 315 "StatementParser.fsy"
                 : 'expr__));
# 2488 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'num_rvalue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 318 "StatementParser.fsy"
                                             _1 
                   )
# 318 "StatementParser.fsy"
                 : 'arith_expr));
# 2499 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arith_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arith_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 319 "StatementParser.fsy"
                                                            BinOp (_1, ArithBinOp Plus, _3) 
                   )
# 319 "StatementParser.fsy"
                 : 'arith_expr));
# 2511 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arith_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arith_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 320 "StatementParser.fsy"
                                                             BinOp (_1, ArithBinOp Minus, _3) 
                   )
# 320 "StatementParser.fsy"
                 : 'arith_expr));
# 2523 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arith_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arith_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 321 "StatementParser.fsy"
                                                            BinOp (_1, ArithBinOp Mult, _3) 
                   )
# 321 "StatementParser.fsy"
                 : 'arith_expr));
# 2535 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arith_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arith_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 322 "StatementParser.fsy"
                                                           BinOp (_1, ArithBinOp Div, _3) 
                   )
# 322 "StatementParser.fsy"
                 : 'arith_expr));
# 2547 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arith_expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arith_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 323 "StatementParser.fsy"
                                                           BinOp (_1, ArithBinOp Mod, _3) 
                   )
# 323 "StatementParser.fsy"
                 : 'arith_expr));
# 2559 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arith_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 324 "StatementParser.fsy"
                                                              UnOp (ArithUnOp Neg, _2) 
                   )
# 324 "StatementParser.fsy"
                 : 'arith_expr));
# 2570 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arith_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 325 "StatementParser.fsy"
                                                      _2 
                   )
# 325 "StatementParser.fsy"
                 : 'arith_expr));
# 2581 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 328 "StatementParser.fsy"
                                             Lit (String _1) 
                   )
# 328 "StatementParser.fsy"
                 : 'string_expr));
# 2592 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'string_expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 329 "StatementParser.fsy"
                                                       _2 
                   )
# 329 "StatementParser.fsy"
                 : 'string_expr));
# 2603 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition__)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 332 "StatementParser.fsy"
                                              _1 
                   )
# 332 "StatementParser.fsy"
                 : 'condition));
# 2614 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'newlines)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 333 "StatementParser.fsy"
                                                      _2 
                   )
# 333 "StatementParser.fsy"
                 : 'condition));
# 2626 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'cond_expr_right)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 336 "StatementParser.fsy"
                                                       unfold_condition _1 (LogicBinOp And) _3 
                   )
# 336 "StatementParser.fsy"
                 : 'condition__));
# 2638 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'cond_expr_right)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 337 "StatementParser.fsy"
                                                          unfold_condition _1 (LogicBinOp Or) _3 
                   )
# 337 "StatementParser.fsy"
                 : 'condition__));
# 2650 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_binop)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'cond_expr_right)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 338 "StatementParser.fsy"
                                                                unfold_condition _1 _2 _3 
                   )
# 338 "StatementParser.fsy"
                 : 'condition__));
# 2663 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 339 "StatementParser.fsy"
                                                     _2 
                   )
# 339 "StatementParser.fsy"
                 : 'condition__));
# 2674 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 340 "StatementParser.fsy"
                                                  UnOp (LogicUnOp Not, _2) 
                   )
# 340 "StatementParser.fsy"
                 : 'condition__));
# 2685 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 341 "StatementParser.fsy"
                                                          BinOp (_1, LogicBinOp And, _3) 
                   )
# 341 "StatementParser.fsy"
                 : 'condition__));
# 2697 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'condition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 342 "StatementParser.fsy"
                                                         BinOp (_1, LogicBinOp Or, _3) 
                   )
# 342 "StatementParser.fsy"
                 : 'condition__));
# 2709 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cond_expr_right_item)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 345 "StatementParser.fsy"
                                                    [(_1, None)] 
                   )
# 345 "StatementParser.fsy"
                 : 'cond_expr_right));
# 2720 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cond_expr_right_item)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'cond_expr_right)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 346 "StatementParser.fsy"
                                                                      (_1, Some (LogicBinOp And)) :: _3 
                   )
# 346 "StatementParser.fsy"
                 : 'cond_expr_right));
# 2732 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'cond_expr_right_item)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'cond_expr_right)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 347 "StatementParser.fsy"
                                                                      (_1, Some (LogicBinOp Or)) :: _3 
                   )
# 347 "StatementParser.fsy"
                 : 'cond_expr_right));
# 2744 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 350 "StatementParser.fsy"
                                        _1 
                   )
# 350 "StatementParser.fsy"
                 : 'cond_expr_right_item));
# 2755 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 351 "StatementParser.fsy"
                                             Lit(String " ") 
                   )
# 351 "StatementParser.fsy"
                 : 'cond_expr_right_item));
# 2765 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 352 "StatementParser.fsy"
                                            Lit (Int (0L)) 
                   )
# 352 "StatementParser.fsy"
                 : 'cond_expr_right_item));
# 2775 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'newlines)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 353 "StatementParser.fsy"
                                                    Lit(String " ") 
                   )
# 353 "StatementParser.fsy"
                 : 'cond_expr_right_item));
# 2786 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'newlines)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 354 "StatementParser.fsy"
                                                   Lit (Int (0L)) 
                   )
# 354 "StatementParser.fsy"
                 : 'cond_expr_right_item));
# 2797 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 357 "StatementParser.fsy"
                                        LogicBinOp And 
                   )
# 357 "StatementParser.fsy"
                 : 'logic_binop));
# 2807 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 358 "StatementParser.fsy"
                                          LogicBinOp Or 
                   )
# 358 "StatementParser.fsy"
                 : 'logic_binop));
# 2817 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 361 "StatementParser.fsy"
                                        ArithBinOp Plus 
                   )
# 361 "StatementParser.fsy"
                 : 'arith_binop));
# 2827 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 362 "StatementParser.fsy"
                                            ArithBinOp Minus 
                   )
# 362 "StatementParser.fsy"
                 : 'arith_binop));
# 2837 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 363 "StatementParser.fsy"
                                           ArithBinOp Mult 
                   )
# 363 "StatementParser.fsy"
                 : 'arith_binop));
# 2847 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 364 "StatementParser.fsy"
                                           ArithBinOp Div 
                   )
# 364 "StatementParser.fsy"
                 : 'arith_binop));
# 2857 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 365 "StatementParser.fsy"
                                           ArithBinOp Mod 
                   )
# 365 "StatementParser.fsy"
                 : 'arith_binop));
# 2867 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_binop_symbol)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 368 "StatementParser.fsy"
                                                  RelBinOp _1 
                   )
# 368 "StatementParser.fsy"
                 : 'bool_binop));
# 2878 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'bool_binop_keywords)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 369 "StatementParser.fsy"
                                                       RelBinOp _1 
                   )
# 369 "StatementParser.fsy"
                 : 'bool_binop));
# 2889 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 372 "StatementParser.fsy"
                                       Eq 
                   )
# 372 "StatementParser.fsy"
                 : 'bool_binop_symbol));
# 2899 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 373 "StatementParser.fsy"
                                          Lt 
                   )
# 373 "StatementParser.fsy"
                 : 'bool_binop_symbol));
# 2909 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 374 "StatementParser.fsy"
                                           Gt 
                   )
# 374 "StatementParser.fsy"
                 : 'bool_binop_symbol));
# 2919 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 375 "StatementParser.fsy"
                                           Leq 
                   )
# 375 "StatementParser.fsy"
                 : 'bool_binop_symbol));
# 2929 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 376 "StatementParser.fsy"
                                           Geq 
                   )
# 376 "StatementParser.fsy"
                 : 'bool_binop_symbol));
# 2939 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 377 "StatementParser.fsy"
                                           Neq 
                   )
# 377 "StatementParser.fsy"
                 : 'bool_binop_symbol));
# 2949 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 378 "StatementParser.fsy"
                                             Neq 
                   )
# 378 "StatementParser.fsy"
                 : 'bool_binop_symbol));
# 2959 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 381 "StatementParser.fsy"
                                         Eq 
                   )
# 381 "StatementParser.fsy"
                 : 'bool_binop_keywords));
# 2969 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 382 "StatementParser.fsy"
                                              Eq 
                   )
# 382 "StatementParser.fsy"
                 : 'bool_binop_keywords));
# 2979 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 383 "StatementParser.fsy"
                                              Eq 
                   )
# 383 "StatementParser.fsy"
                 : 'bool_binop_keywords));
# 2989 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 384 "StatementParser.fsy"
                                                 Eq 
                   )
# 384 "StatementParser.fsy"
                 : 'bool_binop_keywords));
# 2999 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 385 "StatementParser.fsy"
                                               Lt 
                   )
# 385 "StatementParser.fsy"
                 : 'bool_binop_keywords));
# 3009 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 386 "StatementParser.fsy"
                                                 Lt 
                   )
# 386 "StatementParser.fsy"
                 : 'bool_binop_keywords));
# 3019 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 387 "StatementParser.fsy"
                                                      Leq 
                   )
# 387 "StatementParser.fsy"
                 : 'bool_binop_keywords));
# 3029 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 388 "StatementParser.fsy"
                                                        Leq 
                   )
# 388 "StatementParser.fsy"
                 : 'bool_binop_keywords));
# 3039 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 389 "StatementParser.fsy"
                                                        Leq 
                   )
# 389 "StatementParser.fsy"
                 : 'bool_binop_keywords));
# 3049 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 390 "StatementParser.fsy"
                                                          Leq 
                   )
# 390 "StatementParser.fsy"
                 : 'bool_binop_keywords));
# 3059 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 391 "StatementParser.fsy"
                                                 Gt 
                   )
# 391 "StatementParser.fsy"
                 : 'bool_binop_keywords));
# 3069 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 392 "StatementParser.fsy"
                                                    Gt 
                   )
# 392 "StatementParser.fsy"
                 : 'bool_binop_keywords));
# 3079 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 393 "StatementParser.fsy"
                                                        Geq 
                   )
# 393 "StatementParser.fsy"
                 : 'bool_binop_keywords));
# 3089 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 394 "StatementParser.fsy"
                                                          Geq 
                   )
# 394 "StatementParser.fsy"
                 : 'bool_binop_keywords));
# 3099 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 395 "StatementParser.fsy"
                                                          Geq 
                   )
# 395 "StatementParser.fsy"
                 : 'bool_binop_keywords));
# 3109 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 396 "StatementParser.fsy"
                                                             Geq 
                   )
# 396 "StatementParser.fsy"
                 : 'bool_binop_keywords));
# 3119 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 400 "StatementParser.fsy"
                                       LValue (Id _1) 
                   )
# 400 "StatementParser.fsy"
                 : 'num_rvalue));
# 3130 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'num_lit)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 401 "StatementParser.fsy"
                                              Lit _1 
                   )
# 401 "StatementParser.fsy"
                 : 'num_rvalue));
# 3141 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'structured_access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 402 "StatementParser.fsy"
                                                     LValue _1 
                   )
# 402 "StatementParser.fsy"
                 : 'num_rvalue));
# 3152 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 405 "StatementParser.fsy"
                                       LValue (Id _1) 
                   )
# 405 "StatementParser.fsy"
                 : 'rvalue));
# 3163 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lit)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 406 "StatementParser.fsy"
                                           Lit _1 
                   )
# 406 "StatementParser.fsy"
                 : 'rvalue));
# 3174 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 407 "StatementParser.fsy"
                                            Lit (Int 0L) 
                   )
# 407 "StatementParser.fsy"
                 : 'rvalue));
# 3184 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 408 "StatementParser.fsy"
                                             Lit (String " ") 
                   )
# 408 "StatementParser.fsy"
                 : 'rvalue));
# 3194 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'structured_access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 409 "StatementParser.fsy"
                                                     LValue _1 
                   )
# 409 "StatementParser.fsy"
                 : 'rvalue));
# 3205 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'array_location)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 413 "StatementParser.fsy"
                                                           Subscript (Id _1, _3) 
                   )
# 413 "StatementParser.fsy"
                 : 'structured_access));
# 3217 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'range_location)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 414 "StatementParser.fsy"
                                                           Id _1 
                   )
# 414 "StatementParser.fsy"
                 : 'structured_access));
# 3229 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'structured_access)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 415 "StatementParser.fsy"
                                                          Select (_3, _1) 
                   )
# 415 "StatementParser.fsy"
                 : 'structured_access));
# 3241 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 416 "StatementParser.fsy"
                                                Id _1 
                   )
# 416 "StatementParser.fsy"
                 : 'structured_access));
# 3252 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'num_lit)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 420 "StatementParser.fsy"
                                           _1 
                   )
# 420 "StatementParser.fsy"
                 : 'lit));
# 3263 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 421 "StatementParser.fsy"
                                           Int 1L 
                   )
# 421 "StatementParser.fsy"
                 : 'lit));
# 3273 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 422 "StatementParser.fsy"
                                            Int 0L 
                   )
# 422 "StatementParser.fsy"
                 : 'lit));
# 3283 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 423 "StatementParser.fsy"
                                             String _1 
                   )
# 423 "StatementParser.fsy"
                 : 'lit));
# 3294 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : uint64)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 426 "StatementParser.fsy"
                                          Int (Convert.ToInt64 _1) 
                   )
# 426 "StatementParser.fsy"
                 : 'num_lit));
# 3305 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int64)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 427 "StatementParser.fsy"
                                             Int _1 
                   )
# 427 "StatementParser.fsy"
                 : 'num_lit));
# 3316 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 428 "StatementParser.fsy"
                                            Float _1 
                   )
# 428 "StatementParser.fsy"
                 : 'num_lit));
# 3327 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 431 "StatementParser.fsy"
                                       LValue (Id _1) 
                   )
# 431 "StatementParser.fsy"
                 : 'array_location));
# 3338 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : uint64)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 432 "StatementParser.fsy"
                                             Lit (Int (Convert.ToInt64 _1)) 
                   )
# 432 "StatementParser.fsy"
                 : 'array_location));
# 3349 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : uint64)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : uint64)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 435 "StatementParser.fsy"
                                                     
                   )
# 435 "StatementParser.fsy"
                 : 'range_location));
# 3361 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : uint64)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 436 "StatementParser.fsy"
                                                     
                   )
# 436 "StatementParser.fsy"
                 : 'range_location));
# 3373 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : uint64)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 437 "StatementParser.fsy"
                                                     
                   )
# 437 "StatementParser.fsy"
                 : 'range_location));
# 3385 "StatementParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.id)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 438 "StatementParser.fsy"
                                                  
                   )
# 438 "StatementParser.fsy"
                 : 'range_location));
|]
# 3398 "StatementParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 92;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let procdiv_line lexer lexbuf : Absyn.Cobol.ProcDiv.line_mode =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
