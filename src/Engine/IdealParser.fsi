// Signature file for parser generated by fsyacc
module CobolAnalyzer.Engine.IdealParser
type token = 
  | BRA
  | KET
  | SQBRA
  | SQKET
  | CURBRA
  | CURKET
  | SIGNED
  | ALPHA
  | ALPHANUM
  | NUM
  | ARRAY
  | NUMBCD
  | NUMONEPERBYTE
  | NUMINT16
  | NUMINT32
  | NUMINT64
  | NUMFLOAT32
  | NUMFLOAT64
  | COLON
  | SEMICOLON
  | COMMA
  | ASSIGN
  | DOT
  | PLUS
  | MINUS
  | MULT
  | DIV
  | MOD
  | NOT
  | AND
  | OR
  | EQ
  | LT
  | GT
  | LEQ
  | GEQ
  | NEQ
  | IF
  | THEN
  | ELSE
  | PROC
  | TRUE
  | FALSE
  | REF
  | VAL
  | WHERE
  | GOTO
  | RETURN
  | PERFORM
  | EOF
  | SIGNEDFMT of (Absyn.FormatSize.t)
  | FLOAT of (float)
  | UFLOAT of (float)
  | UINT64 of (uint64)
  | INT64 of (int64)
  | ID of (Absyn.id)
  | STRING of (string)
type tokenId = 
    | TOKEN_BRA
    | TOKEN_KET
    | TOKEN_SQBRA
    | TOKEN_SQKET
    | TOKEN_CURBRA
    | TOKEN_CURKET
    | TOKEN_SIGNED
    | TOKEN_ALPHA
    | TOKEN_ALPHANUM
    | TOKEN_NUM
    | TOKEN_ARRAY
    | TOKEN_NUMBCD
    | TOKEN_NUMONEPERBYTE
    | TOKEN_NUMINT16
    | TOKEN_NUMINT32
    | TOKEN_NUMINT64
    | TOKEN_NUMFLOAT32
    | TOKEN_NUMFLOAT64
    | TOKEN_COLON
    | TOKEN_SEMICOLON
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_DOT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_MULT
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_NOT
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_EQ
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_LEQ
    | TOKEN_GEQ
    | TOKEN_NEQ
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_PROC
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_REF
    | TOKEN_VAL
    | TOKEN_WHERE
    | TOKEN_GOTO
    | TOKEN_RETURN
    | TOKEN_PERFORM
    | TOKEN_EOF
    | TOKEN_SIGNEDFMT
    | TOKEN_FLOAT
    | TOKEN_UFLOAT
    | TOKEN_UINT64
    | TOKEN_INT64
    | TOKEN_ID
    | TOKEN_STRING
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startprogram
    | NONTERM_sep
    | NONTERM_program
    | NONTERM_lit
    | NONTERM_id
    | NONTERM_expr
    | NONTERM_lvalue
    | NONTERM_actual
    | NONTERM_actuals
    | NONTERM_paragraph_id
    | NONTERM_statement
    | NONTERM_statement'
    | NONTERM_statements
    | NONTERM_block
    | NONTERM_body
    | NONTERM_proc
    | NONTERM_procs
    | NONTERM_ty_bindings
    | NONTERM_ty_binding
    | NONTERM_const_value
    | NONTERM_const_value_seq
    | NONTERM_env_binding
    | NONTERM_env_bindings
    | NONTERM_proc_args
    | NONTERM_pic
    | NONTERM_num
    | NONTERM_num_qual
    | NONTERM_num_fmt
    | NONTERM_plain_num_fmt
    | NONTERM_size_fmt
    | NONTERM_array_fmt
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val program : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ( Absyn.Ideal.program ) 
